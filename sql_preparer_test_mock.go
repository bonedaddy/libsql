package libsql

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// SqlPreparerMock implements sqlPreparer
type SqlPreparerMock struct {
	t minimock.Tester

	funcPrepare          func(ctx context.Context, query string) (s1 sqlStmt, err error)
	afterPrepareCounter  uint64
	beforePrepareCounter uint64
	PrepareMock          mSqlPreparerMockPrepare
}

// NewSqlPreparerMock returns a mock for sqlPreparer
func NewSqlPreparerMock(t minimock.Tester) *SqlPreparerMock {
	m := &SqlPreparerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}
	m.PrepareMock = mSqlPreparerMockPrepare{mock: m}

	return m
}

type mSqlPreparerMockPrepare struct {
	mock               *SqlPreparerMock
	defaultExpectation *SqlPreparerMockPrepareExpectation
	expectations       []*SqlPreparerMockPrepareExpectation
}

// SqlPreparerMockPrepareExpectation specifies expectation struct of the sqlPreparer.Prepare
type SqlPreparerMockPrepareExpectation struct {
	mock    *SqlPreparerMock
	params  *SqlPreparerMockPrepareParams
	results *SqlPreparerMockPrepareResults
	Counter uint64
}

// SqlPreparerMockPrepareParams contains parameters of the sqlPreparer.Prepare
type SqlPreparerMockPrepareParams struct {
	ctx   context.Context
	query string
}

// SqlPreparerMockPrepareResults contains results of the sqlPreparer.Prepare
type SqlPreparerMockPrepareResults struct {
	s1  sqlStmt
	err error
}

// Expect sets up expected params for sqlPreparer.Prepare
func (m *mSqlPreparerMockPrepare) Expect(ctx context.Context, query string) *mSqlPreparerMockPrepare {
	if m.mock.funcPrepare != nil {
		m.mock.t.Fatalf("SqlPreparerMock.Prepare mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SqlPreparerMockPrepareExpectation{}
	}

	m.defaultExpectation.params = &SqlPreparerMockPrepareParams{ctx, query}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by sqlPreparer.Prepare
func (m *mSqlPreparerMockPrepare) Return(s1 sqlStmt, err error) *SqlPreparerMock {
	if m.mock.funcPrepare != nil {
		m.mock.t.Fatalf("SqlPreparerMock.Prepare mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SqlPreparerMockPrepareExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &SqlPreparerMockPrepareResults{s1, err}
	return m.mock
}

//Set uses given function f to mock the sqlPreparer.Prepare method
func (m *mSqlPreparerMockPrepare) Set(f func(ctx context.Context, query string) (s1 sqlStmt, err error)) *SqlPreparerMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the sqlPreparer.Prepare method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the sqlPreparer.Prepare method")
	}

	m.mock.funcPrepare = f
	return m.mock
}

// When sets expectation for the sqlPreparer.Prepare which will trigger the result defined by the following
// Then helper
func (m *mSqlPreparerMockPrepare) When(ctx context.Context, query string) *SqlPreparerMockPrepareExpectation {
	if m.mock.funcPrepare != nil {
		m.mock.t.Fatalf("SqlPreparerMock.Prepare mock is already set by Set")
	}

	expectation := &SqlPreparerMockPrepareExpectation{
		mock:   m.mock,
		params: &SqlPreparerMockPrepareParams{ctx, query},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up sqlPreparer.Prepare return parameters for the expectation previously defined by the When method
func (e *SqlPreparerMockPrepareExpectation) Then(s1 sqlStmt, err error) *SqlPreparerMock {
	e.results = &SqlPreparerMockPrepareResults{s1, err}
	return e.mock
}

// Prepare implements sqlPreparer
func (m *SqlPreparerMock) Prepare(ctx context.Context, query string) (s1 sqlStmt, err error) {
	mm_atomic.AddUint64(&m.beforePrepareCounter, 1)
	defer mm_atomic.AddUint64(&m.afterPrepareCounter, 1)

	for _, e := range m.PrepareMock.expectations {
		if minimock.Equal(*e.params, SqlPreparerMockPrepareParams{ctx, query}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if m.PrepareMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.PrepareMock.defaultExpectation.Counter, 1)
		want := m.PrepareMock.defaultExpectation.params
		got := SqlPreparerMockPrepareParams{ctx, query}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("SqlPreparerMock.Prepare got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.PrepareMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the SqlPreparerMock.Prepare")
		}
		return (*results).s1, (*results).err
	}
	if m.funcPrepare != nil {
		return m.funcPrepare(ctx, query)
	}
	m.t.Fatalf("Unexpected call to SqlPreparerMock.Prepare. %v %v", ctx, query)
	return
}

// PrepareAfterCounter returns a count of finished SqlPreparerMock.Prepare invocations
func (m *SqlPreparerMock) PrepareAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterPrepareCounter)
}

// PrepareBeforeCounter returns a count of SqlPreparerMock.Prepare invocations
func (m *SqlPreparerMock) PrepareBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforePrepareCounter)
}

// MinimockPrepareDone returns true if the count of the Prepare invocations corresponds
// the number of defined expectations
func (m *SqlPreparerMock) MinimockPrepareDone() bool {
	for _, e := range m.PrepareMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PrepareMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPrepareCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPrepare != nil && mm_atomic.LoadUint64(&m.afterPrepareCounter) < 1 {
		return false
	}
	return true
}

// MinimockPrepareInspect logs each unmet expectation
func (m *SqlPreparerMock) MinimockPrepareInspect() {
	for _, e := range m.PrepareMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SqlPreparerMock.Prepare with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PrepareMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPrepareCounter) < 1 {
		if m.PrepareMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SqlPreparerMock.Prepare")
		} else {
			m.t.Errorf("Expected call to SqlPreparerMock.Prepare with params: %#v", *m.PrepareMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPrepare != nil && mm_atomic.LoadUint64(&m.afterPrepareCounter) < 1 {
		m.t.Error("Expected call to SqlPreparerMock.Prepare")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SqlPreparerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockPrepareInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SqlPreparerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SqlPreparerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockPrepareDone()
}
