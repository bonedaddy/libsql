package libsql

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"database/sql"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// SqlStmtMock implements sqlStmt
type SqlStmtMock struct {
	t minimock.Tester

	funcClose          func() (err error)
	afterCloseCounter  uint64
	beforeCloseCounter uint64
	CloseMock          mSqlStmtMockClose

	funcExec          func(ctx context.Context, args ...interface{}) (r1 sql.Result, err error)
	afterExecCounter  uint64
	beforeExecCounter uint64
	ExecMock          mSqlStmtMockExec

	funcQuery          func(ctx context.Context, args ...interface{}) (s1 sqlRows, err error)
	afterQueryCounter  uint64
	beforeQueryCounter uint64
	QueryMock          mSqlStmtMockQuery
}

// NewSqlStmtMock returns a mock for sqlStmt
func NewSqlStmtMock(t minimock.Tester) *SqlStmtMock {
	m := &SqlStmtMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}
	m.CloseMock = mSqlStmtMockClose{mock: m}
	m.ExecMock = mSqlStmtMockExec{mock: m}
	m.QueryMock = mSqlStmtMockQuery{mock: m}

	return m
}

type mSqlStmtMockClose struct {
	mock               *SqlStmtMock
	defaultExpectation *SqlStmtMockCloseExpectation
	expectations       []*SqlStmtMockCloseExpectation
}

// SqlStmtMockCloseExpectation specifies expectation struct of the sqlStmt.Close
type SqlStmtMockCloseExpectation struct {
	mock *SqlStmtMock

	results *SqlStmtMockCloseResults
	Counter uint64
}

// SqlStmtMockCloseResults contains results of the sqlStmt.Close
type SqlStmtMockCloseResults struct {
	err error
}

// Expect sets up expected params for sqlStmt.Close
func (m *mSqlStmtMockClose) Expect() *mSqlStmtMockClose {
	if m.mock.funcClose != nil {
		m.mock.t.Fatalf("SqlStmtMock.Close mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SqlStmtMockCloseExpectation{}
	}

	return m
}

// Return sets up results that will be returned by sqlStmt.Close
func (m *mSqlStmtMockClose) Return(err error) *SqlStmtMock {
	if m.mock.funcClose != nil {
		m.mock.t.Fatalf("SqlStmtMock.Close mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SqlStmtMockCloseExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &SqlStmtMockCloseResults{err}
	return m.mock
}

//Set uses given function f to mock the sqlStmt.Close method
func (m *mSqlStmtMockClose) Set(f func() (err error)) *SqlStmtMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the sqlStmt.Close method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the sqlStmt.Close method")
	}

	m.mock.funcClose = f
	return m.mock
}

// Close implements sqlStmt
func (m *SqlStmtMock) Close() (err error) {
	mm_atomic.AddUint64(&m.beforeCloseCounter, 1)
	defer mm_atomic.AddUint64(&m.afterCloseCounter, 1)

	if m.CloseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.CloseMock.defaultExpectation.Counter, 1)

		results := m.CloseMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the SqlStmtMock.Close")
		}
		return (*results).err
	}
	if m.funcClose != nil {
		return m.funcClose()
	}
	m.t.Fatalf("Unexpected call to SqlStmtMock.Close.")
	return
}

// CloseAfterCounter returns a count of finished SqlStmtMock.Close invocations
func (m *SqlStmtMock) CloseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterCloseCounter)
}

// CloseBeforeCounter returns a count of SqlStmtMock.Close invocations
func (m *SqlStmtMock) CloseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeCloseCounter)
}

// MinimockCloseDone returns true if the count of the Close invocations corresponds
// the number of defined expectations
func (m *SqlStmtMock) MinimockCloseDone() bool {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		return false
	}
	return true
}

// MinimockCloseInspect logs each unmet expectation
func (m *SqlStmtMock) MinimockCloseInspect() {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to SqlStmtMock.Close")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		m.t.Error("Expected call to SqlStmtMock.Close")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		m.t.Error("Expected call to SqlStmtMock.Close")
	}
}

type mSqlStmtMockExec struct {
	mock               *SqlStmtMock
	defaultExpectation *SqlStmtMockExecExpectation
	expectations       []*SqlStmtMockExecExpectation
}

// SqlStmtMockExecExpectation specifies expectation struct of the sqlStmt.Exec
type SqlStmtMockExecExpectation struct {
	mock    *SqlStmtMock
	params  *SqlStmtMockExecParams
	results *SqlStmtMockExecResults
	Counter uint64
}

// SqlStmtMockExecParams contains parameters of the sqlStmt.Exec
type SqlStmtMockExecParams struct {
	ctx  context.Context
	args []interface{}
}

// SqlStmtMockExecResults contains results of the sqlStmt.Exec
type SqlStmtMockExecResults struct {
	r1  sql.Result
	err error
}

// Expect sets up expected params for sqlStmt.Exec
func (m *mSqlStmtMockExec) Expect(ctx context.Context, args ...interface{}) *mSqlStmtMockExec {
	if m.mock.funcExec != nil {
		m.mock.t.Fatalf("SqlStmtMock.Exec mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SqlStmtMockExecExpectation{}
	}

	m.defaultExpectation.params = &SqlStmtMockExecParams{ctx, args}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by sqlStmt.Exec
func (m *mSqlStmtMockExec) Return(r1 sql.Result, err error) *SqlStmtMock {
	if m.mock.funcExec != nil {
		m.mock.t.Fatalf("SqlStmtMock.Exec mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SqlStmtMockExecExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &SqlStmtMockExecResults{r1, err}
	return m.mock
}

//Set uses given function f to mock the sqlStmt.Exec method
func (m *mSqlStmtMockExec) Set(f func(ctx context.Context, args ...interface{}) (r1 sql.Result, err error)) *SqlStmtMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the sqlStmt.Exec method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the sqlStmt.Exec method")
	}

	m.mock.funcExec = f
	return m.mock
}

// When sets expectation for the sqlStmt.Exec which will trigger the result defined by the following
// Then helper
func (m *mSqlStmtMockExec) When(ctx context.Context, args ...interface{}) *SqlStmtMockExecExpectation {
	if m.mock.funcExec != nil {
		m.mock.t.Fatalf("SqlStmtMock.Exec mock is already set by Set")
	}

	expectation := &SqlStmtMockExecExpectation{
		mock:   m.mock,
		params: &SqlStmtMockExecParams{ctx, args},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up sqlStmt.Exec return parameters for the expectation previously defined by the When method
func (e *SqlStmtMockExecExpectation) Then(r1 sql.Result, err error) *SqlStmtMock {
	e.results = &SqlStmtMockExecResults{r1, err}
	return e.mock
}

// Exec implements sqlStmt
func (m *SqlStmtMock) Exec(ctx context.Context, args ...interface{}) (r1 sql.Result, err error) {
	mm_atomic.AddUint64(&m.beforeExecCounter, 1)
	defer mm_atomic.AddUint64(&m.afterExecCounter, 1)

	for _, e := range m.ExecMock.expectations {
		if minimock.Equal(*e.params, SqlStmtMockExecParams{ctx, args}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if m.ExecMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.ExecMock.defaultExpectation.Counter, 1)
		want := m.ExecMock.defaultExpectation.params
		got := SqlStmtMockExecParams{ctx, args}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("SqlStmtMock.Exec got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.ExecMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the SqlStmtMock.Exec")
		}
		return (*results).r1, (*results).err
	}
	if m.funcExec != nil {
		return m.funcExec(ctx, args...)
	}
	m.t.Fatalf("Unexpected call to SqlStmtMock.Exec. %v %v", ctx, args)
	return
}

// ExecAfterCounter returns a count of finished SqlStmtMock.Exec invocations
func (m *SqlStmtMock) ExecAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterExecCounter)
}

// ExecBeforeCounter returns a count of SqlStmtMock.Exec invocations
func (m *SqlStmtMock) ExecBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeExecCounter)
}

// MinimockExecDone returns true if the count of the Exec invocations corresponds
// the number of defined expectations
func (m *SqlStmtMock) MinimockExecDone() bool {
	for _, e := range m.ExecMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ExecMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcExec != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		return false
	}
	return true
}

// MinimockExecInspect logs each unmet expectation
func (m *SqlStmtMock) MinimockExecInspect() {
	for _, e := range m.ExecMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SqlStmtMock.Exec with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ExecMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		if m.ExecMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SqlStmtMock.Exec")
		} else {
			m.t.Errorf("Expected call to SqlStmtMock.Exec with params: %#v", *m.ExecMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcExec != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		m.t.Error("Expected call to SqlStmtMock.Exec")
	}
}

type mSqlStmtMockQuery struct {
	mock               *SqlStmtMock
	defaultExpectation *SqlStmtMockQueryExpectation
	expectations       []*SqlStmtMockQueryExpectation
}

// SqlStmtMockQueryExpectation specifies expectation struct of the sqlStmt.Query
type SqlStmtMockQueryExpectation struct {
	mock    *SqlStmtMock
	params  *SqlStmtMockQueryParams
	results *SqlStmtMockQueryResults
	Counter uint64
}

// SqlStmtMockQueryParams contains parameters of the sqlStmt.Query
type SqlStmtMockQueryParams struct {
	ctx  context.Context
	args []interface{}
}

// SqlStmtMockQueryResults contains results of the sqlStmt.Query
type SqlStmtMockQueryResults struct {
	s1  sqlRows
	err error
}

// Expect sets up expected params for sqlStmt.Query
func (m *mSqlStmtMockQuery) Expect(ctx context.Context, args ...interface{}) *mSqlStmtMockQuery {
	if m.mock.funcQuery != nil {
		m.mock.t.Fatalf("SqlStmtMock.Query mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SqlStmtMockQueryExpectation{}
	}

	m.defaultExpectation.params = &SqlStmtMockQueryParams{ctx, args}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by sqlStmt.Query
func (m *mSqlStmtMockQuery) Return(s1 sqlRows, err error) *SqlStmtMock {
	if m.mock.funcQuery != nil {
		m.mock.t.Fatalf("SqlStmtMock.Query mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SqlStmtMockQueryExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &SqlStmtMockQueryResults{s1, err}
	return m.mock
}

//Set uses given function f to mock the sqlStmt.Query method
func (m *mSqlStmtMockQuery) Set(f func(ctx context.Context, args ...interface{}) (s1 sqlRows, err error)) *SqlStmtMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the sqlStmt.Query method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the sqlStmt.Query method")
	}

	m.mock.funcQuery = f
	return m.mock
}

// When sets expectation for the sqlStmt.Query which will trigger the result defined by the following
// Then helper
func (m *mSqlStmtMockQuery) When(ctx context.Context, args ...interface{}) *SqlStmtMockQueryExpectation {
	if m.mock.funcQuery != nil {
		m.mock.t.Fatalf("SqlStmtMock.Query mock is already set by Set")
	}

	expectation := &SqlStmtMockQueryExpectation{
		mock:   m.mock,
		params: &SqlStmtMockQueryParams{ctx, args},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up sqlStmt.Query return parameters for the expectation previously defined by the When method
func (e *SqlStmtMockQueryExpectation) Then(s1 sqlRows, err error) *SqlStmtMock {
	e.results = &SqlStmtMockQueryResults{s1, err}
	return e.mock
}

// Query implements sqlStmt
func (m *SqlStmtMock) Query(ctx context.Context, args ...interface{}) (s1 sqlRows, err error) {
	mm_atomic.AddUint64(&m.beforeQueryCounter, 1)
	defer mm_atomic.AddUint64(&m.afterQueryCounter, 1)

	for _, e := range m.QueryMock.expectations {
		if minimock.Equal(*e.params, SqlStmtMockQueryParams{ctx, args}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if m.QueryMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.QueryMock.defaultExpectation.Counter, 1)
		want := m.QueryMock.defaultExpectation.params
		got := SqlStmtMockQueryParams{ctx, args}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("SqlStmtMock.Query got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.QueryMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the SqlStmtMock.Query")
		}
		return (*results).s1, (*results).err
	}
	if m.funcQuery != nil {
		return m.funcQuery(ctx, args...)
	}
	m.t.Fatalf("Unexpected call to SqlStmtMock.Query. %v %v", ctx, args)
	return
}

// QueryAfterCounter returns a count of finished SqlStmtMock.Query invocations
func (m *SqlStmtMock) QueryAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterQueryCounter)
}

// QueryBeforeCounter returns a count of SqlStmtMock.Query invocations
func (m *SqlStmtMock) QueryBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeQueryCounter)
}

// MinimockQueryDone returns true if the count of the Query invocations corresponds
// the number of defined expectations
func (m *SqlStmtMock) MinimockQueryDone() bool {
	for _, e := range m.QueryMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.QueryMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterQueryCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcQuery != nil && mm_atomic.LoadUint64(&m.afterQueryCounter) < 1 {
		return false
	}
	return true
}

// MinimockQueryInspect logs each unmet expectation
func (m *SqlStmtMock) MinimockQueryInspect() {
	for _, e := range m.QueryMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SqlStmtMock.Query with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.QueryMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterQueryCounter) < 1 {
		if m.QueryMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SqlStmtMock.Query")
		} else {
			m.t.Errorf("Expected call to SqlStmtMock.Query with params: %#v", *m.QueryMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcQuery != nil && mm_atomic.LoadUint64(&m.afterQueryCounter) < 1 {
		m.t.Error("Expected call to SqlStmtMock.Query")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SqlStmtMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCloseInspect()

		m.MinimockExecInspect()

		m.MinimockQueryInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SqlStmtMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SqlStmtMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCloseDone() &&
		m.MinimockExecDone() &&
		m.MinimockQueryDone()
}
