package libsql

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// PreparerMock implements Preparer
type PreparerMock struct {
	t minimock.Tester

	funcPrepared          func(ctx context.Context, sql string, work func(Statement) error) (err error)
	afterPreparedCounter  uint64
	beforePreparedCounter uint64
	PreparedMock          mPreparerMockPrepared
}

// NewPreparerMock returns a mock for Preparer
func NewPreparerMock(t minimock.Tester) *PreparerMock {
	m := &PreparerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}
	m.PreparedMock = mPreparerMockPrepared{mock: m}

	return m
}

type mPreparerMockPrepared struct {
	mock               *PreparerMock
	defaultExpectation *PreparerMockPreparedExpectation
	expectations       []*PreparerMockPreparedExpectation
}

// PreparerMockPreparedExpectation specifies expectation struct of the Preparer.Prepared
type PreparerMockPreparedExpectation struct {
	mock    *PreparerMock
	params  *PreparerMockPreparedParams
	results *PreparerMockPreparedResults
	Counter uint64
}

// PreparerMockPreparedParams contains parameters of the Preparer.Prepared
type PreparerMockPreparedParams struct {
	ctx  context.Context
	sql  string
	work func(Statement) error
}

// PreparerMockPreparedResults contains results of the Preparer.Prepared
type PreparerMockPreparedResults struct {
	err error
}

// Expect sets up expected params for Preparer.Prepared
func (m *mPreparerMockPrepared) Expect(ctx context.Context, sql string, work func(Statement) error) *mPreparerMockPrepared {
	if m.mock.funcPrepared != nil {
		m.mock.t.Fatalf("PreparerMock.Prepared mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &PreparerMockPreparedExpectation{}
	}

	m.defaultExpectation.params = &PreparerMockPreparedParams{ctx, sql, work}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Preparer.Prepared
func (m *mPreparerMockPrepared) Return(err error) *PreparerMock {
	if m.mock.funcPrepared != nil {
		m.mock.t.Fatalf("PreparerMock.Prepared mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &PreparerMockPreparedExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &PreparerMockPreparedResults{err}
	return m.mock
}

//Set uses given function f to mock the Preparer.Prepared method
func (m *mPreparerMockPrepared) Set(f func(ctx context.Context, sql string, work func(Statement) error) (err error)) *PreparerMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Preparer.Prepared method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Preparer.Prepared method")
	}

	m.mock.funcPrepared = f
	return m.mock
}

// When sets expectation for the Preparer.Prepared which will trigger the result defined by the following
// Then helper
func (m *mPreparerMockPrepared) When(ctx context.Context, sql string, work func(Statement) error) *PreparerMockPreparedExpectation {
	if m.mock.funcPrepared != nil {
		m.mock.t.Fatalf("PreparerMock.Prepared mock is already set by Set")
	}

	expectation := &PreparerMockPreparedExpectation{
		mock:   m.mock,
		params: &PreparerMockPreparedParams{ctx, sql, work},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Preparer.Prepared return parameters for the expectation previously defined by the When method
func (e *PreparerMockPreparedExpectation) Then(err error) *PreparerMock {
	e.results = &PreparerMockPreparedResults{err}
	return e.mock
}

// Prepared implements Preparer
func (m *PreparerMock) Prepared(ctx context.Context, sql string, work func(Statement) error) (err error) {
	mm_atomic.AddUint64(&m.beforePreparedCounter, 1)
	defer mm_atomic.AddUint64(&m.afterPreparedCounter, 1)

	for _, e := range m.PreparedMock.expectations {
		if minimock.Equal(*e.params, PreparerMockPreparedParams{ctx, sql, work}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if m.PreparedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.PreparedMock.defaultExpectation.Counter, 1)
		want := m.PreparedMock.defaultExpectation.params
		got := PreparerMockPreparedParams{ctx, sql, work}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("PreparerMock.Prepared got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.PreparedMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the PreparerMock.Prepared")
		}
		return (*results).err
	}
	if m.funcPrepared != nil {
		return m.funcPrepared(ctx, sql, work)
	}
	m.t.Fatalf("Unexpected call to PreparerMock.Prepared. %v %v %v", ctx, sql, work)
	return
}

// PreparedAfterCounter returns a count of finished PreparerMock.Prepared invocations
func (m *PreparerMock) PreparedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterPreparedCounter)
}

// PreparedBeforeCounter returns a count of PreparerMock.Prepared invocations
func (m *PreparerMock) PreparedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforePreparedCounter)
}

// MinimockPreparedDone returns true if the count of the Prepared invocations corresponds
// the number of defined expectations
func (m *PreparerMock) MinimockPreparedDone() bool {
	for _, e := range m.PreparedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PreparedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPreparedCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPrepared != nil && mm_atomic.LoadUint64(&m.afterPreparedCounter) < 1 {
		return false
	}
	return true
}

// MinimockPreparedInspect logs each unmet expectation
func (m *PreparerMock) MinimockPreparedInspect() {
	for _, e := range m.PreparedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PreparerMock.Prepared with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PreparedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPreparedCounter) < 1 {
		if m.PreparedMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PreparerMock.Prepared")
		} else {
			m.t.Errorf("Expected call to PreparerMock.Prepared with params: %#v", *m.PreparedMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPrepared != nil && mm_atomic.LoadUint64(&m.afterPreparedCounter) < 1 {
		m.t.Error("Expected call to PreparerMock.Prepared")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PreparerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockPreparedInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PreparerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PreparerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockPreparedDone()
}
