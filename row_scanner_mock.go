package libsql

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// RowScannerMock implements RowScanner
type RowScannerMock struct {
	t minimock.Tester

	funcInto          func() (pa1 []interface{})
	afterIntoCounter  uint64
	beforeIntoCounter uint64
	IntoMock          mRowScannerMockInto

	funcRowScanned          func() (err error)
	afterRowScannedCounter  uint64
	beforeRowScannedCounter uint64
	RowScannedMock          mRowScannerMockRowScanned
}

// NewRowScannerMock returns a mock for RowScanner
func NewRowScannerMock(t minimock.Tester) *RowScannerMock {
	m := &RowScannerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}
	m.IntoMock = mRowScannerMockInto{mock: m}
	m.RowScannedMock = mRowScannerMockRowScanned{mock: m}

	return m
}

type mRowScannerMockInto struct {
	mock               *RowScannerMock
	defaultExpectation *RowScannerMockIntoExpectation
	expectations       []*RowScannerMockIntoExpectation
}

// RowScannerMockIntoExpectation specifies expectation struct of the RowScanner.Into
type RowScannerMockIntoExpectation struct {
	mock *RowScannerMock

	results *RowScannerMockIntoResults
	Counter uint64
}

// RowScannerMockIntoResults contains results of the RowScanner.Into
type RowScannerMockIntoResults struct {
	pa1 []interface{}
}

// Expect sets up expected params for RowScanner.Into
func (m *mRowScannerMockInto) Expect() *mRowScannerMockInto {
	if m.mock.funcInto != nil {
		m.mock.t.Fatalf("RowScannerMock.Into mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &RowScannerMockIntoExpectation{}
	}

	return m
}

// Return sets up results that will be returned by RowScanner.Into
func (m *mRowScannerMockInto) Return(pa1 []interface{}) *RowScannerMock {
	if m.mock.funcInto != nil {
		m.mock.t.Fatalf("RowScannerMock.Into mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &RowScannerMockIntoExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &RowScannerMockIntoResults{pa1}
	return m.mock
}

//Set uses given function f to mock the RowScanner.Into method
func (m *mRowScannerMockInto) Set(f func() (pa1 []interface{})) *RowScannerMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the RowScanner.Into method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the RowScanner.Into method")
	}

	m.mock.funcInto = f
	return m.mock
}

// Into implements RowScanner
func (m *RowScannerMock) Into() (pa1 []interface{}) {
	mm_atomic.AddUint64(&m.beforeIntoCounter, 1)
	defer mm_atomic.AddUint64(&m.afterIntoCounter, 1)

	if m.IntoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.IntoMock.defaultExpectation.Counter, 1)

		results := m.IntoMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the RowScannerMock.Into")
		}
		return (*results).pa1
	}
	if m.funcInto != nil {
		return m.funcInto()
	}
	m.t.Fatalf("Unexpected call to RowScannerMock.Into.")
	return
}

// IntoAfterCounter returns a count of finished RowScannerMock.Into invocations
func (m *RowScannerMock) IntoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterIntoCounter)
}

// IntoBeforeCounter returns a count of RowScannerMock.Into invocations
func (m *RowScannerMock) IntoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeIntoCounter)
}

// MinimockIntoDone returns true if the count of the Into invocations corresponds
// the number of defined expectations
func (m *RowScannerMock) MinimockIntoDone() bool {
	for _, e := range m.IntoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IntoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIntoCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInto != nil && mm_atomic.LoadUint64(&m.afterIntoCounter) < 1 {
		return false
	}
	return true
}

// MinimockIntoInspect logs each unmet expectation
func (m *RowScannerMock) MinimockIntoInspect() {
	for _, e := range m.IntoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to RowScannerMock.Into")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IntoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIntoCounter) < 1 {
		m.t.Error("Expected call to RowScannerMock.Into")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInto != nil && mm_atomic.LoadUint64(&m.afterIntoCounter) < 1 {
		m.t.Error("Expected call to RowScannerMock.Into")
	}
}

type mRowScannerMockRowScanned struct {
	mock               *RowScannerMock
	defaultExpectation *RowScannerMockRowScannedExpectation
	expectations       []*RowScannerMockRowScannedExpectation
}

// RowScannerMockRowScannedExpectation specifies expectation struct of the RowScanner.RowScanned
type RowScannerMockRowScannedExpectation struct {
	mock *RowScannerMock

	results *RowScannerMockRowScannedResults
	Counter uint64
}

// RowScannerMockRowScannedResults contains results of the RowScanner.RowScanned
type RowScannerMockRowScannedResults struct {
	err error
}

// Expect sets up expected params for RowScanner.RowScanned
func (m *mRowScannerMockRowScanned) Expect() *mRowScannerMockRowScanned {
	if m.mock.funcRowScanned != nil {
		m.mock.t.Fatalf("RowScannerMock.RowScanned mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &RowScannerMockRowScannedExpectation{}
	}

	return m
}

// Return sets up results that will be returned by RowScanner.RowScanned
func (m *mRowScannerMockRowScanned) Return(err error) *RowScannerMock {
	if m.mock.funcRowScanned != nil {
		m.mock.t.Fatalf("RowScannerMock.RowScanned mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &RowScannerMockRowScannedExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &RowScannerMockRowScannedResults{err}
	return m.mock
}

//Set uses given function f to mock the RowScanner.RowScanned method
func (m *mRowScannerMockRowScanned) Set(f func() (err error)) *RowScannerMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the RowScanner.RowScanned method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the RowScanner.RowScanned method")
	}

	m.mock.funcRowScanned = f
	return m.mock
}

// RowScanned implements RowScanner
func (m *RowScannerMock) RowScanned() (err error) {
	mm_atomic.AddUint64(&m.beforeRowScannedCounter, 1)
	defer mm_atomic.AddUint64(&m.afterRowScannedCounter, 1)

	if m.RowScannedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.RowScannedMock.defaultExpectation.Counter, 1)

		results := m.RowScannedMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the RowScannerMock.RowScanned")
		}
		return (*results).err
	}
	if m.funcRowScanned != nil {
		return m.funcRowScanned()
	}
	m.t.Fatalf("Unexpected call to RowScannerMock.RowScanned.")
	return
}

// RowScannedAfterCounter returns a count of finished RowScannerMock.RowScanned invocations
func (m *RowScannerMock) RowScannedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterRowScannedCounter)
}

// RowScannedBeforeCounter returns a count of RowScannerMock.RowScanned invocations
func (m *RowScannerMock) RowScannedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeRowScannedCounter)
}

// MinimockRowScannedDone returns true if the count of the RowScanned invocations corresponds
// the number of defined expectations
func (m *RowScannerMock) MinimockRowScannedDone() bool {
	for _, e := range m.RowScannedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RowScannedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRowScannedCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRowScanned != nil && mm_atomic.LoadUint64(&m.afterRowScannedCounter) < 1 {
		return false
	}
	return true
}

// MinimockRowScannedInspect logs each unmet expectation
func (m *RowScannerMock) MinimockRowScannedInspect() {
	for _, e := range m.RowScannedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to RowScannerMock.RowScanned")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RowScannedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRowScannedCounter) < 1 {
		m.t.Error("Expected call to RowScannerMock.RowScanned")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRowScanned != nil && mm_atomic.LoadUint64(&m.afterRowScannedCounter) < 1 {
		m.t.Error("Expected call to RowScannerMock.RowScanned")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RowScannerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockIntoInspect()

		m.MinimockRowScannedInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RowScannerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RowScannerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockIntoDone() &&
		m.MinimockRowScannedDone()
}
