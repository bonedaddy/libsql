package libsql

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"database/sql"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// SqlQueryerMock implements sqlQueryer
type SqlQueryerMock struct {
	t minimock.Tester

	funcExec          func(ctx context.Context, query string, args ...interface{}) (r1 sql.Result, err error)
	inspectFuncExec   func(ctx context.Context, query string, args ...interface{})
	afterExecCounter  uint64
	beforeExecCounter uint64
	ExecMock          mSqlQueryerMockExec

	funcQuery          func(ctx context.Context, query string, args ...interface{}) (s1 sqlRows, err error)
	inspectFuncQuery   func(ctx context.Context, query string, args ...interface{})
	afterQueryCounter  uint64
	beforeQueryCounter uint64
	QueryMock          mSqlQueryerMockQuery
}

// NewSqlQueryerMock returns a mock for sqlQueryer
func NewSqlQueryerMock(t minimock.Tester) *SqlQueryerMock {
	m := &SqlQueryerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ExecMock = mSqlQueryerMockExec{mock: m}
	m.ExecMock.callArgs = []*SqlQueryerMockExecParams{}

	m.QueryMock = mSqlQueryerMockQuery{mock: m}
	m.QueryMock.callArgs = []*SqlQueryerMockQueryParams{}

	return m
}

type mSqlQueryerMockExec struct {
	mock               *SqlQueryerMock
	defaultExpectation *SqlQueryerMockExecExpectation
	expectations       []*SqlQueryerMockExecExpectation

	callArgs []*SqlQueryerMockExecParams
	mutex    sync.RWMutex
}

// SqlQueryerMockExecExpectation specifies expectation struct of the sqlQueryer.Exec
type SqlQueryerMockExecExpectation struct {
	mock    *SqlQueryerMock
	params  *SqlQueryerMockExecParams
	results *SqlQueryerMockExecResults
	Counter uint64
}

// SqlQueryerMockExecParams contains parameters of the sqlQueryer.Exec
type SqlQueryerMockExecParams struct {
	ctx   context.Context
	query string
	args  []interface{}
}

// SqlQueryerMockExecResults contains results of the sqlQueryer.Exec
type SqlQueryerMockExecResults struct {
	r1  sql.Result
	err error
}

// Expect sets up expected params for sqlQueryer.Exec
func (mmExec *mSqlQueryerMockExec) Expect(ctx context.Context, query string, args ...interface{}) *mSqlQueryerMockExec {
	if mmExec.mock.funcExec != nil {
		mmExec.mock.t.Fatalf("SqlQueryerMock.Exec mock is already set by Set")
	}

	if mmExec.defaultExpectation == nil {
		mmExec.defaultExpectation = &SqlQueryerMockExecExpectation{}
	}

	mmExec.defaultExpectation.params = &SqlQueryerMockExecParams{ctx, query, args}
	for _, e := range mmExec.expectations {
		if minimock.Equal(e.params, mmExec.defaultExpectation.params) {
			mmExec.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmExec.defaultExpectation.params)
		}
	}

	return mmExec
}

// Inspect accepts an inspector function that has same arguments as the sqlQueryer.Exec
func (mmExec *mSqlQueryerMockExec) Inspect(f func(ctx context.Context, query string, args ...interface{})) *mSqlQueryerMockExec {
	if mmExec.mock.inspectFuncExec != nil {
		mmExec.mock.t.Fatalf("Inspect function is already set for SqlQueryerMock.Exec")
	}

	mmExec.mock.inspectFuncExec = f

	return mmExec
}

// Return sets up results that will be returned by sqlQueryer.Exec
func (mmExec *mSqlQueryerMockExec) Return(r1 sql.Result, err error) *SqlQueryerMock {
	if mmExec.mock.funcExec != nil {
		mmExec.mock.t.Fatalf("SqlQueryerMock.Exec mock is already set by Set")
	}

	if mmExec.defaultExpectation == nil {
		mmExec.defaultExpectation = &SqlQueryerMockExecExpectation{mock: mmExec.mock}
	}
	mmExec.defaultExpectation.results = &SqlQueryerMockExecResults{r1, err}
	return mmExec.mock
}

//Set uses given function f to mock the sqlQueryer.Exec method
func (mmExec *mSqlQueryerMockExec) Set(f func(ctx context.Context, query string, args ...interface{}) (r1 sql.Result, err error)) *SqlQueryerMock {
	if mmExec.defaultExpectation != nil {
		mmExec.mock.t.Fatalf("Default expectation is already set for the sqlQueryer.Exec method")
	}

	if len(mmExec.expectations) > 0 {
		mmExec.mock.t.Fatalf("Some expectations are already set for the sqlQueryer.Exec method")
	}

	mmExec.mock.funcExec = f
	return mmExec.mock
}

// When sets expectation for the sqlQueryer.Exec which will trigger the result defined by the following
// Then helper
func (mmExec *mSqlQueryerMockExec) When(ctx context.Context, query string, args ...interface{}) *SqlQueryerMockExecExpectation {
	if mmExec.mock.funcExec != nil {
		mmExec.mock.t.Fatalf("SqlQueryerMock.Exec mock is already set by Set")
	}

	expectation := &SqlQueryerMockExecExpectation{
		mock:   mmExec.mock,
		params: &SqlQueryerMockExecParams{ctx, query, args},
	}
	mmExec.expectations = append(mmExec.expectations, expectation)
	return expectation
}

// Then sets up sqlQueryer.Exec return parameters for the expectation previously defined by the When method
func (e *SqlQueryerMockExecExpectation) Then(r1 sql.Result, err error) *SqlQueryerMock {
	e.results = &SqlQueryerMockExecResults{r1, err}
	return e.mock
}

// Exec implements sqlQueryer
func (mmExec *SqlQueryerMock) Exec(ctx context.Context, query string, args ...interface{}) (r1 sql.Result, err error) {
	mm_atomic.AddUint64(&mmExec.beforeExecCounter, 1)
	defer mm_atomic.AddUint64(&mmExec.afterExecCounter, 1)

	if mmExec.inspectFuncExec != nil {
		mmExec.inspectFuncExec(ctx, query, args...)
	}

	mm_params := &SqlQueryerMockExecParams{ctx, query, args}

	// Record call args
	mmExec.ExecMock.mutex.Lock()
	mmExec.ExecMock.callArgs = append(mmExec.ExecMock.callArgs, mm_params)
	mmExec.ExecMock.mutex.Unlock()

	for _, e := range mmExec.ExecMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmExec.ExecMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmExec.ExecMock.defaultExpectation.Counter, 1)
		mm_want := mmExec.ExecMock.defaultExpectation.params
		mm_got := SqlQueryerMockExecParams{ctx, query, args}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmExec.t.Errorf("SqlQueryerMock.Exec got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmExec.ExecMock.defaultExpectation.results
		if mm_results == nil {
			mmExec.t.Fatal("No results are set for the SqlQueryerMock.Exec")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmExec.funcExec != nil {
		return mmExec.funcExec(ctx, query, args...)
	}
	mmExec.t.Fatalf("Unexpected call to SqlQueryerMock.Exec. %v %v %v", ctx, query, args)
	return
}

// ExecAfterCounter returns a count of finished SqlQueryerMock.Exec invocations
func (mmExec *SqlQueryerMock) ExecAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmExec.afterExecCounter)
}

// ExecBeforeCounter returns a count of SqlQueryerMock.Exec invocations
func (mmExec *SqlQueryerMock) ExecBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmExec.beforeExecCounter)
}

// Calls returns a list of arguments used in each call to SqlQueryerMock.Exec.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmExec *mSqlQueryerMockExec) Calls() []*SqlQueryerMockExecParams {
	mmExec.mutex.RLock()

	argCopy := make([]*SqlQueryerMockExecParams, len(mmExec.callArgs))
	copy(argCopy, mmExec.callArgs)

	mmExec.mutex.RUnlock()

	return argCopy
}

// MinimockExecDone returns true if the count of the Exec invocations corresponds
// the number of defined expectations
func (m *SqlQueryerMock) MinimockExecDone() bool {
	for _, e := range m.ExecMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ExecMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcExec != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		return false
	}
	return true
}

// MinimockExecInspect logs each unmet expectation
func (m *SqlQueryerMock) MinimockExecInspect() {
	for _, e := range m.ExecMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SqlQueryerMock.Exec with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ExecMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		if m.ExecMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SqlQueryerMock.Exec")
		} else {
			m.t.Errorf("Expected call to SqlQueryerMock.Exec with params: %#v", *m.ExecMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcExec != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		m.t.Error("Expected call to SqlQueryerMock.Exec")
	}
}

type mSqlQueryerMockQuery struct {
	mock               *SqlQueryerMock
	defaultExpectation *SqlQueryerMockQueryExpectation
	expectations       []*SqlQueryerMockQueryExpectation

	callArgs []*SqlQueryerMockQueryParams
	mutex    sync.RWMutex
}

// SqlQueryerMockQueryExpectation specifies expectation struct of the sqlQueryer.Query
type SqlQueryerMockQueryExpectation struct {
	mock    *SqlQueryerMock
	params  *SqlQueryerMockQueryParams
	results *SqlQueryerMockQueryResults
	Counter uint64
}

// SqlQueryerMockQueryParams contains parameters of the sqlQueryer.Query
type SqlQueryerMockQueryParams struct {
	ctx   context.Context
	query string
	args  []interface{}
}

// SqlQueryerMockQueryResults contains results of the sqlQueryer.Query
type SqlQueryerMockQueryResults struct {
	s1  sqlRows
	err error
}

// Expect sets up expected params for sqlQueryer.Query
func (mmQuery *mSqlQueryerMockQuery) Expect(ctx context.Context, query string, args ...interface{}) *mSqlQueryerMockQuery {
	if mmQuery.mock.funcQuery != nil {
		mmQuery.mock.t.Fatalf("SqlQueryerMock.Query mock is already set by Set")
	}

	if mmQuery.defaultExpectation == nil {
		mmQuery.defaultExpectation = &SqlQueryerMockQueryExpectation{}
	}

	mmQuery.defaultExpectation.params = &SqlQueryerMockQueryParams{ctx, query, args}
	for _, e := range mmQuery.expectations {
		if minimock.Equal(e.params, mmQuery.defaultExpectation.params) {
			mmQuery.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmQuery.defaultExpectation.params)
		}
	}

	return mmQuery
}

// Inspect accepts an inspector function that has same arguments as the sqlQueryer.Query
func (mmQuery *mSqlQueryerMockQuery) Inspect(f func(ctx context.Context, query string, args ...interface{})) *mSqlQueryerMockQuery {
	if mmQuery.mock.inspectFuncQuery != nil {
		mmQuery.mock.t.Fatalf("Inspect function is already set for SqlQueryerMock.Query")
	}

	mmQuery.mock.inspectFuncQuery = f

	return mmQuery
}

// Return sets up results that will be returned by sqlQueryer.Query
func (mmQuery *mSqlQueryerMockQuery) Return(s1 sqlRows, err error) *SqlQueryerMock {
	if mmQuery.mock.funcQuery != nil {
		mmQuery.mock.t.Fatalf("SqlQueryerMock.Query mock is already set by Set")
	}

	if mmQuery.defaultExpectation == nil {
		mmQuery.defaultExpectation = &SqlQueryerMockQueryExpectation{mock: mmQuery.mock}
	}
	mmQuery.defaultExpectation.results = &SqlQueryerMockQueryResults{s1, err}
	return mmQuery.mock
}

//Set uses given function f to mock the sqlQueryer.Query method
func (mmQuery *mSqlQueryerMockQuery) Set(f func(ctx context.Context, query string, args ...interface{}) (s1 sqlRows, err error)) *SqlQueryerMock {
	if mmQuery.defaultExpectation != nil {
		mmQuery.mock.t.Fatalf("Default expectation is already set for the sqlQueryer.Query method")
	}

	if len(mmQuery.expectations) > 0 {
		mmQuery.mock.t.Fatalf("Some expectations are already set for the sqlQueryer.Query method")
	}

	mmQuery.mock.funcQuery = f
	return mmQuery.mock
}

// When sets expectation for the sqlQueryer.Query which will trigger the result defined by the following
// Then helper
func (mmQuery *mSqlQueryerMockQuery) When(ctx context.Context, query string, args ...interface{}) *SqlQueryerMockQueryExpectation {
	if mmQuery.mock.funcQuery != nil {
		mmQuery.mock.t.Fatalf("SqlQueryerMock.Query mock is already set by Set")
	}

	expectation := &SqlQueryerMockQueryExpectation{
		mock:   mmQuery.mock,
		params: &SqlQueryerMockQueryParams{ctx, query, args},
	}
	mmQuery.expectations = append(mmQuery.expectations, expectation)
	return expectation
}

// Then sets up sqlQueryer.Query return parameters for the expectation previously defined by the When method
func (e *SqlQueryerMockQueryExpectation) Then(s1 sqlRows, err error) *SqlQueryerMock {
	e.results = &SqlQueryerMockQueryResults{s1, err}
	return e.mock
}

// Query implements sqlQueryer
func (mmQuery *SqlQueryerMock) Query(ctx context.Context, query string, args ...interface{}) (s1 sqlRows, err error) {
	mm_atomic.AddUint64(&mmQuery.beforeQueryCounter, 1)
	defer mm_atomic.AddUint64(&mmQuery.afterQueryCounter, 1)

	if mmQuery.inspectFuncQuery != nil {
		mmQuery.inspectFuncQuery(ctx, query, args...)
	}

	mm_params := &SqlQueryerMockQueryParams{ctx, query, args}

	// Record call args
	mmQuery.QueryMock.mutex.Lock()
	mmQuery.QueryMock.callArgs = append(mmQuery.QueryMock.callArgs, mm_params)
	mmQuery.QueryMock.mutex.Unlock()

	for _, e := range mmQuery.QueryMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmQuery.QueryMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmQuery.QueryMock.defaultExpectation.Counter, 1)
		mm_want := mmQuery.QueryMock.defaultExpectation.params
		mm_got := SqlQueryerMockQueryParams{ctx, query, args}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmQuery.t.Errorf("SqlQueryerMock.Query got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmQuery.QueryMock.defaultExpectation.results
		if mm_results == nil {
			mmQuery.t.Fatal("No results are set for the SqlQueryerMock.Query")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmQuery.funcQuery != nil {
		return mmQuery.funcQuery(ctx, query, args...)
	}
	mmQuery.t.Fatalf("Unexpected call to SqlQueryerMock.Query. %v %v %v", ctx, query, args)
	return
}

// QueryAfterCounter returns a count of finished SqlQueryerMock.Query invocations
func (mmQuery *SqlQueryerMock) QueryAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmQuery.afterQueryCounter)
}

// QueryBeforeCounter returns a count of SqlQueryerMock.Query invocations
func (mmQuery *SqlQueryerMock) QueryBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmQuery.beforeQueryCounter)
}

// Calls returns a list of arguments used in each call to SqlQueryerMock.Query.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmQuery *mSqlQueryerMockQuery) Calls() []*SqlQueryerMockQueryParams {
	mmQuery.mutex.RLock()

	argCopy := make([]*SqlQueryerMockQueryParams, len(mmQuery.callArgs))
	copy(argCopy, mmQuery.callArgs)

	mmQuery.mutex.RUnlock()

	return argCopy
}

// MinimockQueryDone returns true if the count of the Query invocations corresponds
// the number of defined expectations
func (m *SqlQueryerMock) MinimockQueryDone() bool {
	for _, e := range m.QueryMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.QueryMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterQueryCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcQuery != nil && mm_atomic.LoadUint64(&m.afterQueryCounter) < 1 {
		return false
	}
	return true
}

// MinimockQueryInspect logs each unmet expectation
func (m *SqlQueryerMock) MinimockQueryInspect() {
	for _, e := range m.QueryMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SqlQueryerMock.Query with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.QueryMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterQueryCounter) < 1 {
		if m.QueryMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SqlQueryerMock.Query")
		} else {
			m.t.Errorf("Expected call to SqlQueryerMock.Query with params: %#v", *m.QueryMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcQuery != nil && mm_atomic.LoadUint64(&m.afterQueryCounter) < 1 {
		m.t.Error("Expected call to SqlQueryerMock.Query")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SqlQueryerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockExecInspect()

		m.MinimockQueryInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SqlQueryerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SqlQueryerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockExecDone() &&
		m.MinimockQueryDone()
}
