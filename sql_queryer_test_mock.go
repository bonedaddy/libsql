package libsql

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"database/sql"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// SqlQueryerMock implements sqlQueryer
type SqlQueryerMock struct {
	t minimock.Tester

	funcExec          func(ctx context.Context, query string, args ...interface{}) (r1 sql.Result, err error)
	afterExecCounter  uint64
	beforeExecCounter uint64
	ExecMock          mSqlQueryerMockExec

	funcQuery          func(ctx context.Context, query string, args ...interface{}) (s1 sqlRows, err error)
	afterQueryCounter  uint64
	beforeQueryCounter uint64
	QueryMock          mSqlQueryerMockQuery
}

// NewSqlQueryerMock returns a mock for sqlQueryer
func NewSqlQueryerMock(t minimock.Tester) *SqlQueryerMock {
	m := &SqlQueryerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}
	m.ExecMock = mSqlQueryerMockExec{mock: m}
	m.QueryMock = mSqlQueryerMockQuery{mock: m}

	return m
}

type mSqlQueryerMockExec struct {
	mock               *SqlQueryerMock
	defaultExpectation *SqlQueryerMockExecExpectation
	expectations       []*SqlQueryerMockExecExpectation
}

// SqlQueryerMockExecExpectation specifies expectation struct of the sqlQueryer.Exec
type SqlQueryerMockExecExpectation struct {
	mock    *SqlQueryerMock
	params  *SqlQueryerMockExecParams
	results *SqlQueryerMockExecResults
	Counter uint64
}

// SqlQueryerMockExecParams contains parameters of the sqlQueryer.Exec
type SqlQueryerMockExecParams struct {
	ctx   context.Context
	query string
	args  []interface{}
}

// SqlQueryerMockExecResults contains results of the sqlQueryer.Exec
type SqlQueryerMockExecResults struct {
	r1  sql.Result
	err error
}

// Expect sets up expected params for sqlQueryer.Exec
func (m *mSqlQueryerMockExec) Expect(ctx context.Context, query string, args ...interface{}) *mSqlQueryerMockExec {
	if m.mock.funcExec != nil {
		m.mock.t.Fatalf("SqlQueryerMock.Exec mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SqlQueryerMockExecExpectation{}
	}

	m.defaultExpectation.params = &SqlQueryerMockExecParams{ctx, query, args}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by sqlQueryer.Exec
func (m *mSqlQueryerMockExec) Return(r1 sql.Result, err error) *SqlQueryerMock {
	if m.mock.funcExec != nil {
		m.mock.t.Fatalf("SqlQueryerMock.Exec mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SqlQueryerMockExecExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &SqlQueryerMockExecResults{r1, err}
	return m.mock
}

//Set uses given function f to mock the sqlQueryer.Exec method
func (m *mSqlQueryerMockExec) Set(f func(ctx context.Context, query string, args ...interface{}) (r1 sql.Result, err error)) *SqlQueryerMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the sqlQueryer.Exec method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the sqlQueryer.Exec method")
	}

	m.mock.funcExec = f
	return m.mock
}

// When sets expectation for the sqlQueryer.Exec which will trigger the result defined by the following
// Then helper
func (m *mSqlQueryerMockExec) When(ctx context.Context, query string, args ...interface{}) *SqlQueryerMockExecExpectation {
	if m.mock.funcExec != nil {
		m.mock.t.Fatalf("SqlQueryerMock.Exec mock is already set by Set")
	}

	expectation := &SqlQueryerMockExecExpectation{
		mock:   m.mock,
		params: &SqlQueryerMockExecParams{ctx, query, args},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up sqlQueryer.Exec return parameters for the expectation previously defined by the When method
func (e *SqlQueryerMockExecExpectation) Then(r1 sql.Result, err error) *SqlQueryerMock {
	e.results = &SqlQueryerMockExecResults{r1, err}
	return e.mock
}

// Exec implements sqlQueryer
func (m *SqlQueryerMock) Exec(ctx context.Context, query string, args ...interface{}) (r1 sql.Result, err error) {
	mm_atomic.AddUint64(&m.beforeExecCounter, 1)
	defer mm_atomic.AddUint64(&m.afterExecCounter, 1)

	for _, e := range m.ExecMock.expectations {
		if minimock.Equal(*e.params, SqlQueryerMockExecParams{ctx, query, args}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if m.ExecMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.ExecMock.defaultExpectation.Counter, 1)
		want := m.ExecMock.defaultExpectation.params
		got := SqlQueryerMockExecParams{ctx, query, args}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("SqlQueryerMock.Exec got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.ExecMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the SqlQueryerMock.Exec")
		}
		return (*results).r1, (*results).err
	}
	if m.funcExec != nil {
		return m.funcExec(ctx, query, args...)
	}
	m.t.Fatalf("Unexpected call to SqlQueryerMock.Exec. %v %v %v", ctx, query, args)
	return
}

// ExecAfterCounter returns a count of finished SqlQueryerMock.Exec invocations
func (m *SqlQueryerMock) ExecAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterExecCounter)
}

// ExecBeforeCounter returns a count of SqlQueryerMock.Exec invocations
func (m *SqlQueryerMock) ExecBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeExecCounter)
}

// MinimockExecDone returns true if the count of the Exec invocations corresponds
// the number of defined expectations
func (m *SqlQueryerMock) MinimockExecDone() bool {
	for _, e := range m.ExecMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ExecMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcExec != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		return false
	}
	return true
}

// MinimockExecInspect logs each unmet expectation
func (m *SqlQueryerMock) MinimockExecInspect() {
	for _, e := range m.ExecMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SqlQueryerMock.Exec with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ExecMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		if m.ExecMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SqlQueryerMock.Exec")
		} else {
			m.t.Errorf("Expected call to SqlQueryerMock.Exec with params: %#v", *m.ExecMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcExec != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		m.t.Error("Expected call to SqlQueryerMock.Exec")
	}
}

type mSqlQueryerMockQuery struct {
	mock               *SqlQueryerMock
	defaultExpectation *SqlQueryerMockQueryExpectation
	expectations       []*SqlQueryerMockQueryExpectation
}

// SqlQueryerMockQueryExpectation specifies expectation struct of the sqlQueryer.Query
type SqlQueryerMockQueryExpectation struct {
	mock    *SqlQueryerMock
	params  *SqlQueryerMockQueryParams
	results *SqlQueryerMockQueryResults
	Counter uint64
}

// SqlQueryerMockQueryParams contains parameters of the sqlQueryer.Query
type SqlQueryerMockQueryParams struct {
	ctx   context.Context
	query string
	args  []interface{}
}

// SqlQueryerMockQueryResults contains results of the sqlQueryer.Query
type SqlQueryerMockQueryResults struct {
	s1  sqlRows
	err error
}

// Expect sets up expected params for sqlQueryer.Query
func (m *mSqlQueryerMockQuery) Expect(ctx context.Context, query string, args ...interface{}) *mSqlQueryerMockQuery {
	if m.mock.funcQuery != nil {
		m.mock.t.Fatalf("SqlQueryerMock.Query mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SqlQueryerMockQueryExpectation{}
	}

	m.defaultExpectation.params = &SqlQueryerMockQueryParams{ctx, query, args}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by sqlQueryer.Query
func (m *mSqlQueryerMockQuery) Return(s1 sqlRows, err error) *SqlQueryerMock {
	if m.mock.funcQuery != nil {
		m.mock.t.Fatalf("SqlQueryerMock.Query mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SqlQueryerMockQueryExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &SqlQueryerMockQueryResults{s1, err}
	return m.mock
}

//Set uses given function f to mock the sqlQueryer.Query method
func (m *mSqlQueryerMockQuery) Set(f func(ctx context.Context, query string, args ...interface{}) (s1 sqlRows, err error)) *SqlQueryerMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the sqlQueryer.Query method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the sqlQueryer.Query method")
	}

	m.mock.funcQuery = f
	return m.mock
}

// When sets expectation for the sqlQueryer.Query which will trigger the result defined by the following
// Then helper
func (m *mSqlQueryerMockQuery) When(ctx context.Context, query string, args ...interface{}) *SqlQueryerMockQueryExpectation {
	if m.mock.funcQuery != nil {
		m.mock.t.Fatalf("SqlQueryerMock.Query mock is already set by Set")
	}

	expectation := &SqlQueryerMockQueryExpectation{
		mock:   m.mock,
		params: &SqlQueryerMockQueryParams{ctx, query, args},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up sqlQueryer.Query return parameters for the expectation previously defined by the When method
func (e *SqlQueryerMockQueryExpectation) Then(s1 sqlRows, err error) *SqlQueryerMock {
	e.results = &SqlQueryerMockQueryResults{s1, err}
	return e.mock
}

// Query implements sqlQueryer
func (m *SqlQueryerMock) Query(ctx context.Context, query string, args ...interface{}) (s1 sqlRows, err error) {
	mm_atomic.AddUint64(&m.beforeQueryCounter, 1)
	defer mm_atomic.AddUint64(&m.afterQueryCounter, 1)

	for _, e := range m.QueryMock.expectations {
		if minimock.Equal(*e.params, SqlQueryerMockQueryParams{ctx, query, args}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if m.QueryMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.QueryMock.defaultExpectation.Counter, 1)
		want := m.QueryMock.defaultExpectation.params
		got := SqlQueryerMockQueryParams{ctx, query, args}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("SqlQueryerMock.Query got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.QueryMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the SqlQueryerMock.Query")
		}
		return (*results).s1, (*results).err
	}
	if m.funcQuery != nil {
		return m.funcQuery(ctx, query, args...)
	}
	m.t.Fatalf("Unexpected call to SqlQueryerMock.Query. %v %v %v", ctx, query, args)
	return
}

// QueryAfterCounter returns a count of finished SqlQueryerMock.Query invocations
func (m *SqlQueryerMock) QueryAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterQueryCounter)
}

// QueryBeforeCounter returns a count of SqlQueryerMock.Query invocations
func (m *SqlQueryerMock) QueryBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeQueryCounter)
}

// MinimockQueryDone returns true if the count of the Query invocations corresponds
// the number of defined expectations
func (m *SqlQueryerMock) MinimockQueryDone() bool {
	for _, e := range m.QueryMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.QueryMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterQueryCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcQuery != nil && mm_atomic.LoadUint64(&m.afterQueryCounter) < 1 {
		return false
	}
	return true
}

// MinimockQueryInspect logs each unmet expectation
func (m *SqlQueryerMock) MinimockQueryInspect() {
	for _, e := range m.QueryMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SqlQueryerMock.Query with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.QueryMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterQueryCounter) < 1 {
		if m.QueryMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SqlQueryerMock.Query")
		} else {
			m.t.Errorf("Expected call to SqlQueryerMock.Query with params: %#v", *m.QueryMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcQuery != nil && mm_atomic.LoadUint64(&m.afterQueryCounter) < 1 {
		m.t.Error("Expected call to SqlQueryerMock.Query")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SqlQueryerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockExecInspect()

		m.MinimockQueryInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SqlQueryerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SqlQueryerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockExecDone() &&
		m.MinimockQueryDone()
}
