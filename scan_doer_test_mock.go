package libsql

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// ScanDoerMock implements scanDoer
type ScanDoerMock struct {
	t minimock.Tester

	funcDo          func(rowScanner RowScanner, oneRow bool, query func() (sqlRows, error)) (err error)
	afterDoCounter  uint64
	beforeDoCounter uint64
	DoMock          mScanDoerMockDo
}

// NewScanDoerMock returns a mock for scanDoer
func NewScanDoerMock(t minimock.Tester) *ScanDoerMock {
	m := &ScanDoerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}
	m.DoMock = mScanDoerMockDo{mock: m}

	return m
}

type mScanDoerMockDo struct {
	mock               *ScanDoerMock
	defaultExpectation *ScanDoerMockDoExpectation
	expectations       []*ScanDoerMockDoExpectation
}

// ScanDoerMockDoExpectation specifies expectation struct of the scanDoer.Do
type ScanDoerMockDoExpectation struct {
	mock    *ScanDoerMock
	params  *ScanDoerMockDoParams
	results *ScanDoerMockDoResults
	Counter uint64
}

// ScanDoerMockDoParams contains parameters of the scanDoer.Do
type ScanDoerMockDoParams struct {
	rowScanner RowScanner
	oneRow     bool
	query      func() (sqlRows, error)
}

// ScanDoerMockDoResults contains results of the scanDoer.Do
type ScanDoerMockDoResults struct {
	err error
}

// Expect sets up expected params for scanDoer.Do
func (m *mScanDoerMockDo) Expect(rowScanner RowScanner, oneRow bool, query func() (sqlRows, error)) *mScanDoerMockDo {
	if m.mock.funcDo != nil {
		m.mock.t.Fatalf("ScanDoerMock.Do mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &ScanDoerMockDoExpectation{}
	}

	m.defaultExpectation.params = &ScanDoerMockDoParams{rowScanner, oneRow, query}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by scanDoer.Do
func (m *mScanDoerMockDo) Return(err error) *ScanDoerMock {
	if m.mock.funcDo != nil {
		m.mock.t.Fatalf("ScanDoerMock.Do mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &ScanDoerMockDoExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &ScanDoerMockDoResults{err}
	return m.mock
}

//Set uses given function f to mock the scanDoer.Do method
func (m *mScanDoerMockDo) Set(f func(rowScanner RowScanner, oneRow bool, query func() (sqlRows, error)) (err error)) *ScanDoerMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the scanDoer.Do method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the scanDoer.Do method")
	}

	m.mock.funcDo = f
	return m.mock
}

// When sets expectation for the scanDoer.Do which will trigger the result defined by the following
// Then helper
func (m *mScanDoerMockDo) When(rowScanner RowScanner, oneRow bool, query func() (sqlRows, error)) *ScanDoerMockDoExpectation {
	if m.mock.funcDo != nil {
		m.mock.t.Fatalf("ScanDoerMock.Do mock is already set by Set")
	}

	expectation := &ScanDoerMockDoExpectation{
		mock:   m.mock,
		params: &ScanDoerMockDoParams{rowScanner, oneRow, query},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up scanDoer.Do return parameters for the expectation previously defined by the When method
func (e *ScanDoerMockDoExpectation) Then(err error) *ScanDoerMock {
	e.results = &ScanDoerMockDoResults{err}
	return e.mock
}

// Do implements scanDoer
func (m *ScanDoerMock) Do(rowScanner RowScanner, oneRow bool, query func() (sqlRows, error)) (err error) {
	mm_atomic.AddUint64(&m.beforeDoCounter, 1)
	defer mm_atomic.AddUint64(&m.afterDoCounter, 1)

	for _, e := range m.DoMock.expectations {
		if minimock.Equal(*e.params, ScanDoerMockDoParams{rowScanner, oneRow, query}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if m.DoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.DoMock.defaultExpectation.Counter, 1)
		want := m.DoMock.defaultExpectation.params
		got := ScanDoerMockDoParams{rowScanner, oneRow, query}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("ScanDoerMock.Do got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.DoMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the ScanDoerMock.Do")
		}
		return (*results).err
	}
	if m.funcDo != nil {
		return m.funcDo(rowScanner, oneRow, query)
	}
	m.t.Fatalf("Unexpected call to ScanDoerMock.Do. %v %v %v", rowScanner, oneRow, query)
	return
}

// DoAfterCounter returns a count of finished ScanDoerMock.Do invocations
func (m *ScanDoerMock) DoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterDoCounter)
}

// DoBeforeCounter returns a count of ScanDoerMock.Do invocations
func (m *ScanDoerMock) DoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeDoCounter)
}

// MinimockDoDone returns true if the count of the Do invocations corresponds
// the number of defined expectations
func (m *ScanDoerMock) MinimockDoDone() bool {
	for _, e := range m.DoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDoCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDo != nil && mm_atomic.LoadUint64(&m.afterDoCounter) < 1 {
		return false
	}
	return true
}

// MinimockDoInspect logs each unmet expectation
func (m *ScanDoerMock) MinimockDoInspect() {
	for _, e := range m.DoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ScanDoerMock.Do with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDoCounter) < 1 {
		if m.DoMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ScanDoerMock.Do")
		} else {
			m.t.Errorf("Expected call to ScanDoerMock.Do with params: %#v", *m.DoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDo != nil && mm_atomic.LoadUint64(&m.afterDoCounter) < 1 {
		m.t.Error("Expected call to ScanDoerMock.Do")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ScanDoerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockDoInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ScanDoerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ScanDoerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDoDone()
}
