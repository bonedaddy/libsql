package libsql

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"database/sql"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// QueryerMock implements Queryer
type QueryerMock struct {
	t minimock.Tester

	funcScan          func(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) (err error)
	afterScanCounter  uint64
	beforeScanCounter uint64
	ScanMock          mQueryerMockScan

	funcScanOne          func(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) (err error)
	afterScanOneCounter  uint64
	beforeScanOneCounter uint64
	ScanOneMock          mQueryerMockScanOne

	funcUpdate          func(ctx context.Context, sql string, args ...interface{}) (r1 sql.Result, err error)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mQueryerMockUpdate

	funcUpdateAndGetLastInsertID          func(ctx context.Context, sql string, args ...interface{}) (i1 int64, err error)
	afterUpdateAndGetLastInsertIDCounter  uint64
	beforeUpdateAndGetLastInsertIDCounter uint64
	UpdateAndGetLastInsertIDMock          mQueryerMockUpdateAndGetLastInsertID

	funcUpdateAndGetRowsAffected          func(ctx context.Context, sql string, args ...interface{}) (i1 int64, err error)
	afterUpdateAndGetRowsAffectedCounter  uint64
	beforeUpdateAndGetRowsAffectedCounter uint64
	UpdateAndGetRowsAffectedMock          mQueryerMockUpdateAndGetRowsAffected
}

// NewQueryerMock returns a mock for Queryer
func NewQueryerMock(t minimock.Tester) *QueryerMock {
	m := &QueryerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}
	m.ScanMock = mQueryerMockScan{mock: m}
	m.ScanOneMock = mQueryerMockScanOne{mock: m}
	m.UpdateMock = mQueryerMockUpdate{mock: m}
	m.UpdateAndGetLastInsertIDMock = mQueryerMockUpdateAndGetLastInsertID{mock: m}
	m.UpdateAndGetRowsAffectedMock = mQueryerMockUpdateAndGetRowsAffected{mock: m}

	return m
}

type mQueryerMockScan struct {
	mock               *QueryerMock
	defaultExpectation *QueryerMockScanExpectation
	expectations       []*QueryerMockScanExpectation
}

// QueryerMockScanExpectation specifies expectation struct of the Queryer.Scan
type QueryerMockScanExpectation struct {
	mock    *QueryerMock
	params  *QueryerMockScanParams
	results *QueryerMockScanResults
	Counter uint64
}

// QueryerMockScanParams contains parameters of the Queryer.Scan
type QueryerMockScanParams struct {
	ctx     context.Context
	scanner RowScanner
	sql     string
	args    []interface{}
}

// QueryerMockScanResults contains results of the Queryer.Scan
type QueryerMockScanResults struct {
	err error
}

// Expect sets up expected params for Queryer.Scan
func (m *mQueryerMockScan) Expect(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) *mQueryerMockScan {
	if m.mock.funcScan != nil {
		m.mock.t.Fatalf("QueryerMock.Scan mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &QueryerMockScanExpectation{}
	}

	m.defaultExpectation.params = &QueryerMockScanParams{ctx, scanner, sql, args}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Queryer.Scan
func (m *mQueryerMockScan) Return(err error) *QueryerMock {
	if m.mock.funcScan != nil {
		m.mock.t.Fatalf("QueryerMock.Scan mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &QueryerMockScanExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &QueryerMockScanResults{err}
	return m.mock
}

//Set uses given function f to mock the Queryer.Scan method
func (m *mQueryerMockScan) Set(f func(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) (err error)) *QueryerMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Queryer.Scan method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Queryer.Scan method")
	}

	m.mock.funcScan = f
	return m.mock
}

// When sets expectation for the Queryer.Scan which will trigger the result defined by the following
// Then helper
func (m *mQueryerMockScan) When(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) *QueryerMockScanExpectation {
	if m.mock.funcScan != nil {
		m.mock.t.Fatalf("QueryerMock.Scan mock is already set by Set")
	}

	expectation := &QueryerMockScanExpectation{
		mock:   m.mock,
		params: &QueryerMockScanParams{ctx, scanner, sql, args},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Queryer.Scan return parameters for the expectation previously defined by the When method
func (e *QueryerMockScanExpectation) Then(err error) *QueryerMock {
	e.results = &QueryerMockScanResults{err}
	return e.mock
}

// Scan implements Queryer
func (m *QueryerMock) Scan(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) (err error) {
	mm_atomic.AddUint64(&m.beforeScanCounter, 1)
	defer mm_atomic.AddUint64(&m.afterScanCounter, 1)

	for _, e := range m.ScanMock.expectations {
		if minimock.Equal(*e.params, QueryerMockScanParams{ctx, scanner, sql, args}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if m.ScanMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.ScanMock.defaultExpectation.Counter, 1)
		want := m.ScanMock.defaultExpectation.params
		got := QueryerMockScanParams{ctx, scanner, sql, args}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("QueryerMock.Scan got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.ScanMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the QueryerMock.Scan")
		}
		return (*results).err
	}
	if m.funcScan != nil {
		return m.funcScan(ctx, scanner, sql, args...)
	}
	m.t.Fatalf("Unexpected call to QueryerMock.Scan. %v %v %v %v", ctx, scanner, sql, args)
	return
}

// ScanAfterCounter returns a count of finished QueryerMock.Scan invocations
func (m *QueryerMock) ScanAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterScanCounter)
}

// ScanBeforeCounter returns a count of QueryerMock.Scan invocations
func (m *QueryerMock) ScanBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeScanCounter)
}

// MinimockScanDone returns true if the count of the Scan invocations corresponds
// the number of defined expectations
func (m *QueryerMock) MinimockScanDone() bool {
	for _, e := range m.ScanMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ScanMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterScanCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcScan != nil && mm_atomic.LoadUint64(&m.afterScanCounter) < 1 {
		return false
	}
	return true
}

// MinimockScanInspect logs each unmet expectation
func (m *QueryerMock) MinimockScanInspect() {
	for _, e := range m.ScanMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to QueryerMock.Scan with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ScanMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterScanCounter) < 1 {
		if m.ScanMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to QueryerMock.Scan")
		} else {
			m.t.Errorf("Expected call to QueryerMock.Scan with params: %#v", *m.ScanMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcScan != nil && mm_atomic.LoadUint64(&m.afterScanCounter) < 1 {
		m.t.Error("Expected call to QueryerMock.Scan")
	}
}

type mQueryerMockScanOne struct {
	mock               *QueryerMock
	defaultExpectation *QueryerMockScanOneExpectation
	expectations       []*QueryerMockScanOneExpectation
}

// QueryerMockScanOneExpectation specifies expectation struct of the Queryer.ScanOne
type QueryerMockScanOneExpectation struct {
	mock    *QueryerMock
	params  *QueryerMockScanOneParams
	results *QueryerMockScanOneResults
	Counter uint64
}

// QueryerMockScanOneParams contains parameters of the Queryer.ScanOne
type QueryerMockScanOneParams struct {
	ctx     context.Context
	scanner RowScanner
	sql     string
	args    []interface{}
}

// QueryerMockScanOneResults contains results of the Queryer.ScanOne
type QueryerMockScanOneResults struct {
	err error
}

// Expect sets up expected params for Queryer.ScanOne
func (m *mQueryerMockScanOne) Expect(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) *mQueryerMockScanOne {
	if m.mock.funcScanOne != nil {
		m.mock.t.Fatalf("QueryerMock.ScanOne mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &QueryerMockScanOneExpectation{}
	}

	m.defaultExpectation.params = &QueryerMockScanOneParams{ctx, scanner, sql, args}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Queryer.ScanOne
func (m *mQueryerMockScanOne) Return(err error) *QueryerMock {
	if m.mock.funcScanOne != nil {
		m.mock.t.Fatalf("QueryerMock.ScanOne mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &QueryerMockScanOneExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &QueryerMockScanOneResults{err}
	return m.mock
}

//Set uses given function f to mock the Queryer.ScanOne method
func (m *mQueryerMockScanOne) Set(f func(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) (err error)) *QueryerMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Queryer.ScanOne method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Queryer.ScanOne method")
	}

	m.mock.funcScanOne = f
	return m.mock
}

// When sets expectation for the Queryer.ScanOne which will trigger the result defined by the following
// Then helper
func (m *mQueryerMockScanOne) When(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) *QueryerMockScanOneExpectation {
	if m.mock.funcScanOne != nil {
		m.mock.t.Fatalf("QueryerMock.ScanOne mock is already set by Set")
	}

	expectation := &QueryerMockScanOneExpectation{
		mock:   m.mock,
		params: &QueryerMockScanOneParams{ctx, scanner, sql, args},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Queryer.ScanOne return parameters for the expectation previously defined by the When method
func (e *QueryerMockScanOneExpectation) Then(err error) *QueryerMock {
	e.results = &QueryerMockScanOneResults{err}
	return e.mock
}

// ScanOne implements Queryer
func (m *QueryerMock) ScanOne(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) (err error) {
	mm_atomic.AddUint64(&m.beforeScanOneCounter, 1)
	defer mm_atomic.AddUint64(&m.afterScanOneCounter, 1)

	for _, e := range m.ScanOneMock.expectations {
		if minimock.Equal(*e.params, QueryerMockScanOneParams{ctx, scanner, sql, args}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if m.ScanOneMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.ScanOneMock.defaultExpectation.Counter, 1)
		want := m.ScanOneMock.defaultExpectation.params
		got := QueryerMockScanOneParams{ctx, scanner, sql, args}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("QueryerMock.ScanOne got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.ScanOneMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the QueryerMock.ScanOne")
		}
		return (*results).err
	}
	if m.funcScanOne != nil {
		return m.funcScanOne(ctx, scanner, sql, args...)
	}
	m.t.Fatalf("Unexpected call to QueryerMock.ScanOne. %v %v %v %v", ctx, scanner, sql, args)
	return
}

// ScanOneAfterCounter returns a count of finished QueryerMock.ScanOne invocations
func (m *QueryerMock) ScanOneAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterScanOneCounter)
}

// ScanOneBeforeCounter returns a count of QueryerMock.ScanOne invocations
func (m *QueryerMock) ScanOneBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeScanOneCounter)
}

// MinimockScanOneDone returns true if the count of the ScanOne invocations corresponds
// the number of defined expectations
func (m *QueryerMock) MinimockScanOneDone() bool {
	for _, e := range m.ScanOneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ScanOneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterScanOneCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcScanOne != nil && mm_atomic.LoadUint64(&m.afterScanOneCounter) < 1 {
		return false
	}
	return true
}

// MinimockScanOneInspect logs each unmet expectation
func (m *QueryerMock) MinimockScanOneInspect() {
	for _, e := range m.ScanOneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to QueryerMock.ScanOne with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ScanOneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterScanOneCounter) < 1 {
		if m.ScanOneMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to QueryerMock.ScanOne")
		} else {
			m.t.Errorf("Expected call to QueryerMock.ScanOne with params: %#v", *m.ScanOneMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcScanOne != nil && mm_atomic.LoadUint64(&m.afterScanOneCounter) < 1 {
		m.t.Error("Expected call to QueryerMock.ScanOne")
	}
}

type mQueryerMockUpdate struct {
	mock               *QueryerMock
	defaultExpectation *QueryerMockUpdateExpectation
	expectations       []*QueryerMockUpdateExpectation
}

// QueryerMockUpdateExpectation specifies expectation struct of the Queryer.Update
type QueryerMockUpdateExpectation struct {
	mock    *QueryerMock
	params  *QueryerMockUpdateParams
	results *QueryerMockUpdateResults
	Counter uint64
}

// QueryerMockUpdateParams contains parameters of the Queryer.Update
type QueryerMockUpdateParams struct {
	ctx  context.Context
	sql  string
	args []interface{}
}

// QueryerMockUpdateResults contains results of the Queryer.Update
type QueryerMockUpdateResults struct {
	r1  sql.Result
	err error
}

// Expect sets up expected params for Queryer.Update
func (m *mQueryerMockUpdate) Expect(ctx context.Context, sql string, args ...interface{}) *mQueryerMockUpdate {
	if m.mock.funcUpdate != nil {
		m.mock.t.Fatalf("QueryerMock.Update mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &QueryerMockUpdateExpectation{}
	}

	m.defaultExpectation.params = &QueryerMockUpdateParams{ctx, sql, args}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Queryer.Update
func (m *mQueryerMockUpdate) Return(r1 sql.Result, err error) *QueryerMock {
	if m.mock.funcUpdate != nil {
		m.mock.t.Fatalf("QueryerMock.Update mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &QueryerMockUpdateExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &QueryerMockUpdateResults{r1, err}
	return m.mock
}

//Set uses given function f to mock the Queryer.Update method
func (m *mQueryerMockUpdate) Set(f func(ctx context.Context, sql string, args ...interface{}) (r1 sql.Result, err error)) *QueryerMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Queryer.Update method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Queryer.Update method")
	}

	m.mock.funcUpdate = f
	return m.mock
}

// When sets expectation for the Queryer.Update which will trigger the result defined by the following
// Then helper
func (m *mQueryerMockUpdate) When(ctx context.Context, sql string, args ...interface{}) *QueryerMockUpdateExpectation {
	if m.mock.funcUpdate != nil {
		m.mock.t.Fatalf("QueryerMock.Update mock is already set by Set")
	}

	expectation := &QueryerMockUpdateExpectation{
		mock:   m.mock,
		params: &QueryerMockUpdateParams{ctx, sql, args},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Queryer.Update return parameters for the expectation previously defined by the When method
func (e *QueryerMockUpdateExpectation) Then(r1 sql.Result, err error) *QueryerMock {
	e.results = &QueryerMockUpdateResults{r1, err}
	return e.mock
}

// Update implements Queryer
func (m *QueryerMock) Update(ctx context.Context, sql string, args ...interface{}) (r1 sql.Result, err error) {
	mm_atomic.AddUint64(&m.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&m.afterUpdateCounter, 1)

	for _, e := range m.UpdateMock.expectations {
		if minimock.Equal(*e.params, QueryerMockUpdateParams{ctx, sql, args}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if m.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.UpdateMock.defaultExpectation.Counter, 1)
		want := m.UpdateMock.defaultExpectation.params
		got := QueryerMockUpdateParams{ctx, sql, args}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("QueryerMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.UpdateMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the QueryerMock.Update")
		}
		return (*results).r1, (*results).err
	}
	if m.funcUpdate != nil {
		return m.funcUpdate(ctx, sql, args...)
	}
	m.t.Fatalf("Unexpected call to QueryerMock.Update. %v %v %v", ctx, sql, args)
	return
}

// UpdateAfterCounter returns a count of finished QueryerMock.Update invocations
func (m *QueryerMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of QueryerMock.Update invocations
func (m *QueryerMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeUpdateCounter)
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *QueryerMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *QueryerMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to QueryerMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to QueryerMock.Update")
		} else {
			m.t.Errorf("Expected call to QueryerMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to QueryerMock.Update")
	}
}

type mQueryerMockUpdateAndGetLastInsertID struct {
	mock               *QueryerMock
	defaultExpectation *QueryerMockUpdateAndGetLastInsertIDExpectation
	expectations       []*QueryerMockUpdateAndGetLastInsertIDExpectation
}

// QueryerMockUpdateAndGetLastInsertIDExpectation specifies expectation struct of the Queryer.UpdateAndGetLastInsertID
type QueryerMockUpdateAndGetLastInsertIDExpectation struct {
	mock    *QueryerMock
	params  *QueryerMockUpdateAndGetLastInsertIDParams
	results *QueryerMockUpdateAndGetLastInsertIDResults
	Counter uint64
}

// QueryerMockUpdateAndGetLastInsertIDParams contains parameters of the Queryer.UpdateAndGetLastInsertID
type QueryerMockUpdateAndGetLastInsertIDParams struct {
	ctx  context.Context
	sql  string
	args []interface{}
}

// QueryerMockUpdateAndGetLastInsertIDResults contains results of the Queryer.UpdateAndGetLastInsertID
type QueryerMockUpdateAndGetLastInsertIDResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for Queryer.UpdateAndGetLastInsertID
func (m *mQueryerMockUpdateAndGetLastInsertID) Expect(ctx context.Context, sql string, args ...interface{}) *mQueryerMockUpdateAndGetLastInsertID {
	if m.mock.funcUpdateAndGetLastInsertID != nil {
		m.mock.t.Fatalf("QueryerMock.UpdateAndGetLastInsertID mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &QueryerMockUpdateAndGetLastInsertIDExpectation{}
	}

	m.defaultExpectation.params = &QueryerMockUpdateAndGetLastInsertIDParams{ctx, sql, args}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Queryer.UpdateAndGetLastInsertID
func (m *mQueryerMockUpdateAndGetLastInsertID) Return(i1 int64, err error) *QueryerMock {
	if m.mock.funcUpdateAndGetLastInsertID != nil {
		m.mock.t.Fatalf("QueryerMock.UpdateAndGetLastInsertID mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &QueryerMockUpdateAndGetLastInsertIDExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &QueryerMockUpdateAndGetLastInsertIDResults{i1, err}
	return m.mock
}

//Set uses given function f to mock the Queryer.UpdateAndGetLastInsertID method
func (m *mQueryerMockUpdateAndGetLastInsertID) Set(f func(ctx context.Context, sql string, args ...interface{}) (i1 int64, err error)) *QueryerMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Queryer.UpdateAndGetLastInsertID method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Queryer.UpdateAndGetLastInsertID method")
	}

	m.mock.funcUpdateAndGetLastInsertID = f
	return m.mock
}

// When sets expectation for the Queryer.UpdateAndGetLastInsertID which will trigger the result defined by the following
// Then helper
func (m *mQueryerMockUpdateAndGetLastInsertID) When(ctx context.Context, sql string, args ...interface{}) *QueryerMockUpdateAndGetLastInsertIDExpectation {
	if m.mock.funcUpdateAndGetLastInsertID != nil {
		m.mock.t.Fatalf("QueryerMock.UpdateAndGetLastInsertID mock is already set by Set")
	}

	expectation := &QueryerMockUpdateAndGetLastInsertIDExpectation{
		mock:   m.mock,
		params: &QueryerMockUpdateAndGetLastInsertIDParams{ctx, sql, args},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Queryer.UpdateAndGetLastInsertID return parameters for the expectation previously defined by the When method
func (e *QueryerMockUpdateAndGetLastInsertIDExpectation) Then(i1 int64, err error) *QueryerMock {
	e.results = &QueryerMockUpdateAndGetLastInsertIDResults{i1, err}
	return e.mock
}

// UpdateAndGetLastInsertID implements Queryer
func (m *QueryerMock) UpdateAndGetLastInsertID(ctx context.Context, sql string, args ...interface{}) (i1 int64, err error) {
	mm_atomic.AddUint64(&m.beforeUpdateAndGetLastInsertIDCounter, 1)
	defer mm_atomic.AddUint64(&m.afterUpdateAndGetLastInsertIDCounter, 1)

	for _, e := range m.UpdateAndGetLastInsertIDMock.expectations {
		if minimock.Equal(*e.params, QueryerMockUpdateAndGetLastInsertIDParams{ctx, sql, args}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if m.UpdateAndGetLastInsertIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.UpdateAndGetLastInsertIDMock.defaultExpectation.Counter, 1)
		want := m.UpdateAndGetLastInsertIDMock.defaultExpectation.params
		got := QueryerMockUpdateAndGetLastInsertIDParams{ctx, sql, args}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("QueryerMock.UpdateAndGetLastInsertID got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.UpdateAndGetLastInsertIDMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the QueryerMock.UpdateAndGetLastInsertID")
		}
		return (*results).i1, (*results).err
	}
	if m.funcUpdateAndGetLastInsertID != nil {
		return m.funcUpdateAndGetLastInsertID(ctx, sql, args...)
	}
	m.t.Fatalf("Unexpected call to QueryerMock.UpdateAndGetLastInsertID. %v %v %v", ctx, sql, args)
	return
}

// UpdateAndGetLastInsertIDAfterCounter returns a count of finished QueryerMock.UpdateAndGetLastInsertID invocations
func (m *QueryerMock) UpdateAndGetLastInsertIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterUpdateAndGetLastInsertIDCounter)
}

// UpdateAndGetLastInsertIDBeforeCounter returns a count of QueryerMock.UpdateAndGetLastInsertID invocations
func (m *QueryerMock) UpdateAndGetLastInsertIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeUpdateAndGetLastInsertIDCounter)
}

// MinimockUpdateAndGetLastInsertIDDone returns true if the count of the UpdateAndGetLastInsertID invocations corresponds
// the number of defined expectations
func (m *QueryerMock) MinimockUpdateAndGetLastInsertIDDone() bool {
	for _, e := range m.UpdateAndGetLastInsertIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateAndGetLastInsertIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetLastInsertIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateAndGetLastInsertID != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetLastInsertIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateAndGetLastInsertIDInspect logs each unmet expectation
func (m *QueryerMock) MinimockUpdateAndGetLastInsertIDInspect() {
	for _, e := range m.UpdateAndGetLastInsertIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to QueryerMock.UpdateAndGetLastInsertID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateAndGetLastInsertIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetLastInsertIDCounter) < 1 {
		if m.UpdateAndGetLastInsertIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to QueryerMock.UpdateAndGetLastInsertID")
		} else {
			m.t.Errorf("Expected call to QueryerMock.UpdateAndGetLastInsertID with params: %#v", *m.UpdateAndGetLastInsertIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateAndGetLastInsertID != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetLastInsertIDCounter) < 1 {
		m.t.Error("Expected call to QueryerMock.UpdateAndGetLastInsertID")
	}
}

type mQueryerMockUpdateAndGetRowsAffected struct {
	mock               *QueryerMock
	defaultExpectation *QueryerMockUpdateAndGetRowsAffectedExpectation
	expectations       []*QueryerMockUpdateAndGetRowsAffectedExpectation
}

// QueryerMockUpdateAndGetRowsAffectedExpectation specifies expectation struct of the Queryer.UpdateAndGetRowsAffected
type QueryerMockUpdateAndGetRowsAffectedExpectation struct {
	mock    *QueryerMock
	params  *QueryerMockUpdateAndGetRowsAffectedParams
	results *QueryerMockUpdateAndGetRowsAffectedResults
	Counter uint64
}

// QueryerMockUpdateAndGetRowsAffectedParams contains parameters of the Queryer.UpdateAndGetRowsAffected
type QueryerMockUpdateAndGetRowsAffectedParams struct {
	ctx  context.Context
	sql  string
	args []interface{}
}

// QueryerMockUpdateAndGetRowsAffectedResults contains results of the Queryer.UpdateAndGetRowsAffected
type QueryerMockUpdateAndGetRowsAffectedResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for Queryer.UpdateAndGetRowsAffected
func (m *mQueryerMockUpdateAndGetRowsAffected) Expect(ctx context.Context, sql string, args ...interface{}) *mQueryerMockUpdateAndGetRowsAffected {
	if m.mock.funcUpdateAndGetRowsAffected != nil {
		m.mock.t.Fatalf("QueryerMock.UpdateAndGetRowsAffected mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &QueryerMockUpdateAndGetRowsAffectedExpectation{}
	}

	m.defaultExpectation.params = &QueryerMockUpdateAndGetRowsAffectedParams{ctx, sql, args}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Queryer.UpdateAndGetRowsAffected
func (m *mQueryerMockUpdateAndGetRowsAffected) Return(i1 int64, err error) *QueryerMock {
	if m.mock.funcUpdateAndGetRowsAffected != nil {
		m.mock.t.Fatalf("QueryerMock.UpdateAndGetRowsAffected mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &QueryerMockUpdateAndGetRowsAffectedExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &QueryerMockUpdateAndGetRowsAffectedResults{i1, err}
	return m.mock
}

//Set uses given function f to mock the Queryer.UpdateAndGetRowsAffected method
func (m *mQueryerMockUpdateAndGetRowsAffected) Set(f func(ctx context.Context, sql string, args ...interface{}) (i1 int64, err error)) *QueryerMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Queryer.UpdateAndGetRowsAffected method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Queryer.UpdateAndGetRowsAffected method")
	}

	m.mock.funcUpdateAndGetRowsAffected = f
	return m.mock
}

// When sets expectation for the Queryer.UpdateAndGetRowsAffected which will trigger the result defined by the following
// Then helper
func (m *mQueryerMockUpdateAndGetRowsAffected) When(ctx context.Context, sql string, args ...interface{}) *QueryerMockUpdateAndGetRowsAffectedExpectation {
	if m.mock.funcUpdateAndGetRowsAffected != nil {
		m.mock.t.Fatalf("QueryerMock.UpdateAndGetRowsAffected mock is already set by Set")
	}

	expectation := &QueryerMockUpdateAndGetRowsAffectedExpectation{
		mock:   m.mock,
		params: &QueryerMockUpdateAndGetRowsAffectedParams{ctx, sql, args},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Queryer.UpdateAndGetRowsAffected return parameters for the expectation previously defined by the When method
func (e *QueryerMockUpdateAndGetRowsAffectedExpectation) Then(i1 int64, err error) *QueryerMock {
	e.results = &QueryerMockUpdateAndGetRowsAffectedResults{i1, err}
	return e.mock
}

// UpdateAndGetRowsAffected implements Queryer
func (m *QueryerMock) UpdateAndGetRowsAffected(ctx context.Context, sql string, args ...interface{}) (i1 int64, err error) {
	mm_atomic.AddUint64(&m.beforeUpdateAndGetRowsAffectedCounter, 1)
	defer mm_atomic.AddUint64(&m.afterUpdateAndGetRowsAffectedCounter, 1)

	for _, e := range m.UpdateAndGetRowsAffectedMock.expectations {
		if minimock.Equal(*e.params, QueryerMockUpdateAndGetRowsAffectedParams{ctx, sql, args}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if m.UpdateAndGetRowsAffectedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.UpdateAndGetRowsAffectedMock.defaultExpectation.Counter, 1)
		want := m.UpdateAndGetRowsAffectedMock.defaultExpectation.params
		got := QueryerMockUpdateAndGetRowsAffectedParams{ctx, sql, args}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("QueryerMock.UpdateAndGetRowsAffected got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.UpdateAndGetRowsAffectedMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the QueryerMock.UpdateAndGetRowsAffected")
		}
		return (*results).i1, (*results).err
	}
	if m.funcUpdateAndGetRowsAffected != nil {
		return m.funcUpdateAndGetRowsAffected(ctx, sql, args...)
	}
	m.t.Fatalf("Unexpected call to QueryerMock.UpdateAndGetRowsAffected. %v %v %v", ctx, sql, args)
	return
}

// UpdateAndGetRowsAffectedAfterCounter returns a count of finished QueryerMock.UpdateAndGetRowsAffected invocations
func (m *QueryerMock) UpdateAndGetRowsAffectedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterUpdateAndGetRowsAffectedCounter)
}

// UpdateAndGetRowsAffectedBeforeCounter returns a count of QueryerMock.UpdateAndGetRowsAffected invocations
func (m *QueryerMock) UpdateAndGetRowsAffectedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeUpdateAndGetRowsAffectedCounter)
}

// MinimockUpdateAndGetRowsAffectedDone returns true if the count of the UpdateAndGetRowsAffected invocations corresponds
// the number of defined expectations
func (m *QueryerMock) MinimockUpdateAndGetRowsAffectedDone() bool {
	for _, e := range m.UpdateAndGetRowsAffectedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateAndGetRowsAffectedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetRowsAffectedCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateAndGetRowsAffected != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetRowsAffectedCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateAndGetRowsAffectedInspect logs each unmet expectation
func (m *QueryerMock) MinimockUpdateAndGetRowsAffectedInspect() {
	for _, e := range m.UpdateAndGetRowsAffectedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to QueryerMock.UpdateAndGetRowsAffected with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateAndGetRowsAffectedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetRowsAffectedCounter) < 1 {
		if m.UpdateAndGetRowsAffectedMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to QueryerMock.UpdateAndGetRowsAffected")
		} else {
			m.t.Errorf("Expected call to QueryerMock.UpdateAndGetRowsAffected with params: %#v", *m.UpdateAndGetRowsAffectedMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateAndGetRowsAffected != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetRowsAffectedCounter) < 1 {
		m.t.Error("Expected call to QueryerMock.UpdateAndGetRowsAffected")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *QueryerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockScanInspect()

		m.MinimockScanOneInspect()

		m.MinimockUpdateInspect()

		m.MinimockUpdateAndGetLastInsertIDInspect()

		m.MinimockUpdateAndGetRowsAffectedInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *QueryerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *QueryerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockScanDone() &&
		m.MinimockScanOneDone() &&
		m.MinimockUpdateDone() &&
		m.MinimockUpdateAndGetLastInsertIDDone() &&
		m.MinimockUpdateAndGetRowsAffectedDone()
}
