package libsql

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"database/sql"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// TransactionMock implements Transaction
type TransactionMock struct {
	t minimock.Tester

	funcPrepared          func(ctx context.Context, sql string, work func(Statement) error) (err error)
	afterPreparedCounter  uint64
	beforePreparedCounter uint64
	PreparedMock          mTransactionMockPrepared

	funcScan          func(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) (err error)
	afterScanCounter  uint64
	beforeScanCounter uint64
	ScanMock          mTransactionMockScan

	funcScanOne          func(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) (err error)
	afterScanOneCounter  uint64
	beforeScanOneCounter uint64
	ScanOneMock          mTransactionMockScanOne

	funcUpdate          func(ctx context.Context, sql string, args ...interface{}) (r1 sql.Result, err error)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mTransactionMockUpdate

	funcUpdateAndGetLastInsertID          func(ctx context.Context, sql string, args ...interface{}) (i1 int64, err error)
	afterUpdateAndGetLastInsertIDCounter  uint64
	beforeUpdateAndGetLastInsertIDCounter uint64
	UpdateAndGetLastInsertIDMock          mTransactionMockUpdateAndGetLastInsertID

	funcUpdateAndGetRowsAffected          func(ctx context.Context, sql string, args ...interface{}) (i1 int64, err error)
	afterUpdateAndGetRowsAffectedCounter  uint64
	beforeUpdateAndGetRowsAffectedCounter uint64
	UpdateAndGetRowsAffectedMock          mTransactionMockUpdateAndGetRowsAffected
}

// NewTransactionMock returns a mock for Transaction
func NewTransactionMock(t minimock.Tester) *TransactionMock {
	m := &TransactionMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}
	m.PreparedMock = mTransactionMockPrepared{mock: m}
	m.ScanMock = mTransactionMockScan{mock: m}
	m.ScanOneMock = mTransactionMockScanOne{mock: m}
	m.UpdateMock = mTransactionMockUpdate{mock: m}
	m.UpdateAndGetLastInsertIDMock = mTransactionMockUpdateAndGetLastInsertID{mock: m}
	m.UpdateAndGetRowsAffectedMock = mTransactionMockUpdateAndGetRowsAffected{mock: m}

	return m
}

type mTransactionMockPrepared struct {
	mock               *TransactionMock
	defaultExpectation *TransactionMockPreparedExpectation
	expectations       []*TransactionMockPreparedExpectation
}

// TransactionMockPreparedExpectation specifies expectation struct of the Transaction.Prepared
type TransactionMockPreparedExpectation struct {
	mock    *TransactionMock
	params  *TransactionMockPreparedParams
	results *TransactionMockPreparedResults
	Counter uint64
}

// TransactionMockPreparedParams contains parameters of the Transaction.Prepared
type TransactionMockPreparedParams struct {
	ctx  context.Context
	sql  string
	work func(Statement) error
}

// TransactionMockPreparedResults contains results of the Transaction.Prepared
type TransactionMockPreparedResults struct {
	err error
}

// Expect sets up expected params for Transaction.Prepared
func (m *mTransactionMockPrepared) Expect(ctx context.Context, sql string, work func(Statement) error) *mTransactionMockPrepared {
	if m.mock.funcPrepared != nil {
		m.mock.t.Fatalf("TransactionMock.Prepared mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &TransactionMockPreparedExpectation{}
	}

	m.defaultExpectation.params = &TransactionMockPreparedParams{ctx, sql, work}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Transaction.Prepared
func (m *mTransactionMockPrepared) Return(err error) *TransactionMock {
	if m.mock.funcPrepared != nil {
		m.mock.t.Fatalf("TransactionMock.Prepared mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &TransactionMockPreparedExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &TransactionMockPreparedResults{err}
	return m.mock
}

//Set uses given function f to mock the Transaction.Prepared method
func (m *mTransactionMockPrepared) Set(f func(ctx context.Context, sql string, work func(Statement) error) (err error)) *TransactionMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Transaction.Prepared method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Transaction.Prepared method")
	}

	m.mock.funcPrepared = f
	return m.mock
}

// When sets expectation for the Transaction.Prepared which will trigger the result defined by the following
// Then helper
func (m *mTransactionMockPrepared) When(ctx context.Context, sql string, work func(Statement) error) *TransactionMockPreparedExpectation {
	if m.mock.funcPrepared != nil {
		m.mock.t.Fatalf("TransactionMock.Prepared mock is already set by Set")
	}

	expectation := &TransactionMockPreparedExpectation{
		mock:   m.mock,
		params: &TransactionMockPreparedParams{ctx, sql, work},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Transaction.Prepared return parameters for the expectation previously defined by the When method
func (e *TransactionMockPreparedExpectation) Then(err error) *TransactionMock {
	e.results = &TransactionMockPreparedResults{err}
	return e.mock
}

// Prepared implements Transaction
func (m *TransactionMock) Prepared(ctx context.Context, sql string, work func(Statement) error) (err error) {
	mm_atomic.AddUint64(&m.beforePreparedCounter, 1)
	defer mm_atomic.AddUint64(&m.afterPreparedCounter, 1)

	for _, e := range m.PreparedMock.expectations {
		if minimock.Equal(*e.params, TransactionMockPreparedParams{ctx, sql, work}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if m.PreparedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.PreparedMock.defaultExpectation.Counter, 1)
		want := m.PreparedMock.defaultExpectation.params
		got := TransactionMockPreparedParams{ctx, sql, work}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("TransactionMock.Prepared got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.PreparedMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the TransactionMock.Prepared")
		}
		return (*results).err
	}
	if m.funcPrepared != nil {
		return m.funcPrepared(ctx, sql, work)
	}
	m.t.Fatalf("Unexpected call to TransactionMock.Prepared. %v %v %v", ctx, sql, work)
	return
}

// PreparedAfterCounter returns a count of finished TransactionMock.Prepared invocations
func (m *TransactionMock) PreparedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterPreparedCounter)
}

// PreparedBeforeCounter returns a count of TransactionMock.Prepared invocations
func (m *TransactionMock) PreparedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforePreparedCounter)
}

// MinimockPreparedDone returns true if the count of the Prepared invocations corresponds
// the number of defined expectations
func (m *TransactionMock) MinimockPreparedDone() bool {
	for _, e := range m.PreparedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PreparedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPreparedCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPrepared != nil && mm_atomic.LoadUint64(&m.afterPreparedCounter) < 1 {
		return false
	}
	return true
}

// MinimockPreparedInspect logs each unmet expectation
func (m *TransactionMock) MinimockPreparedInspect() {
	for _, e := range m.PreparedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TransactionMock.Prepared with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PreparedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPreparedCounter) < 1 {
		if m.PreparedMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TransactionMock.Prepared")
		} else {
			m.t.Errorf("Expected call to TransactionMock.Prepared with params: %#v", *m.PreparedMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPrepared != nil && mm_atomic.LoadUint64(&m.afterPreparedCounter) < 1 {
		m.t.Error("Expected call to TransactionMock.Prepared")
	}
}

type mTransactionMockScan struct {
	mock               *TransactionMock
	defaultExpectation *TransactionMockScanExpectation
	expectations       []*TransactionMockScanExpectation
}

// TransactionMockScanExpectation specifies expectation struct of the Transaction.Scan
type TransactionMockScanExpectation struct {
	mock    *TransactionMock
	params  *TransactionMockScanParams
	results *TransactionMockScanResults
	Counter uint64
}

// TransactionMockScanParams contains parameters of the Transaction.Scan
type TransactionMockScanParams struct {
	ctx     context.Context
	scanner RowScanner
	sql     string
	args    []interface{}
}

// TransactionMockScanResults contains results of the Transaction.Scan
type TransactionMockScanResults struct {
	err error
}

// Expect sets up expected params for Transaction.Scan
func (m *mTransactionMockScan) Expect(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) *mTransactionMockScan {
	if m.mock.funcScan != nil {
		m.mock.t.Fatalf("TransactionMock.Scan mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &TransactionMockScanExpectation{}
	}

	m.defaultExpectation.params = &TransactionMockScanParams{ctx, scanner, sql, args}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Transaction.Scan
func (m *mTransactionMockScan) Return(err error) *TransactionMock {
	if m.mock.funcScan != nil {
		m.mock.t.Fatalf("TransactionMock.Scan mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &TransactionMockScanExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &TransactionMockScanResults{err}
	return m.mock
}

//Set uses given function f to mock the Transaction.Scan method
func (m *mTransactionMockScan) Set(f func(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) (err error)) *TransactionMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Transaction.Scan method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Transaction.Scan method")
	}

	m.mock.funcScan = f
	return m.mock
}

// When sets expectation for the Transaction.Scan which will trigger the result defined by the following
// Then helper
func (m *mTransactionMockScan) When(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) *TransactionMockScanExpectation {
	if m.mock.funcScan != nil {
		m.mock.t.Fatalf("TransactionMock.Scan mock is already set by Set")
	}

	expectation := &TransactionMockScanExpectation{
		mock:   m.mock,
		params: &TransactionMockScanParams{ctx, scanner, sql, args},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Transaction.Scan return parameters for the expectation previously defined by the When method
func (e *TransactionMockScanExpectation) Then(err error) *TransactionMock {
	e.results = &TransactionMockScanResults{err}
	return e.mock
}

// Scan implements Transaction
func (m *TransactionMock) Scan(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) (err error) {
	mm_atomic.AddUint64(&m.beforeScanCounter, 1)
	defer mm_atomic.AddUint64(&m.afterScanCounter, 1)

	for _, e := range m.ScanMock.expectations {
		if minimock.Equal(*e.params, TransactionMockScanParams{ctx, scanner, sql, args}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if m.ScanMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.ScanMock.defaultExpectation.Counter, 1)
		want := m.ScanMock.defaultExpectation.params
		got := TransactionMockScanParams{ctx, scanner, sql, args}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("TransactionMock.Scan got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.ScanMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the TransactionMock.Scan")
		}
		return (*results).err
	}
	if m.funcScan != nil {
		return m.funcScan(ctx, scanner, sql, args...)
	}
	m.t.Fatalf("Unexpected call to TransactionMock.Scan. %v %v %v %v", ctx, scanner, sql, args)
	return
}

// ScanAfterCounter returns a count of finished TransactionMock.Scan invocations
func (m *TransactionMock) ScanAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterScanCounter)
}

// ScanBeforeCounter returns a count of TransactionMock.Scan invocations
func (m *TransactionMock) ScanBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeScanCounter)
}

// MinimockScanDone returns true if the count of the Scan invocations corresponds
// the number of defined expectations
func (m *TransactionMock) MinimockScanDone() bool {
	for _, e := range m.ScanMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ScanMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterScanCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcScan != nil && mm_atomic.LoadUint64(&m.afterScanCounter) < 1 {
		return false
	}
	return true
}

// MinimockScanInspect logs each unmet expectation
func (m *TransactionMock) MinimockScanInspect() {
	for _, e := range m.ScanMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TransactionMock.Scan with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ScanMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterScanCounter) < 1 {
		if m.ScanMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TransactionMock.Scan")
		} else {
			m.t.Errorf("Expected call to TransactionMock.Scan with params: %#v", *m.ScanMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcScan != nil && mm_atomic.LoadUint64(&m.afterScanCounter) < 1 {
		m.t.Error("Expected call to TransactionMock.Scan")
	}
}

type mTransactionMockScanOne struct {
	mock               *TransactionMock
	defaultExpectation *TransactionMockScanOneExpectation
	expectations       []*TransactionMockScanOneExpectation
}

// TransactionMockScanOneExpectation specifies expectation struct of the Transaction.ScanOne
type TransactionMockScanOneExpectation struct {
	mock    *TransactionMock
	params  *TransactionMockScanOneParams
	results *TransactionMockScanOneResults
	Counter uint64
}

// TransactionMockScanOneParams contains parameters of the Transaction.ScanOne
type TransactionMockScanOneParams struct {
	ctx     context.Context
	scanner RowScanner
	sql     string
	args    []interface{}
}

// TransactionMockScanOneResults contains results of the Transaction.ScanOne
type TransactionMockScanOneResults struct {
	err error
}

// Expect sets up expected params for Transaction.ScanOne
func (m *mTransactionMockScanOne) Expect(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) *mTransactionMockScanOne {
	if m.mock.funcScanOne != nil {
		m.mock.t.Fatalf("TransactionMock.ScanOne mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &TransactionMockScanOneExpectation{}
	}

	m.defaultExpectation.params = &TransactionMockScanOneParams{ctx, scanner, sql, args}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Transaction.ScanOne
func (m *mTransactionMockScanOne) Return(err error) *TransactionMock {
	if m.mock.funcScanOne != nil {
		m.mock.t.Fatalf("TransactionMock.ScanOne mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &TransactionMockScanOneExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &TransactionMockScanOneResults{err}
	return m.mock
}

//Set uses given function f to mock the Transaction.ScanOne method
func (m *mTransactionMockScanOne) Set(f func(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) (err error)) *TransactionMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Transaction.ScanOne method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Transaction.ScanOne method")
	}

	m.mock.funcScanOne = f
	return m.mock
}

// When sets expectation for the Transaction.ScanOne which will trigger the result defined by the following
// Then helper
func (m *mTransactionMockScanOne) When(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) *TransactionMockScanOneExpectation {
	if m.mock.funcScanOne != nil {
		m.mock.t.Fatalf("TransactionMock.ScanOne mock is already set by Set")
	}

	expectation := &TransactionMockScanOneExpectation{
		mock:   m.mock,
		params: &TransactionMockScanOneParams{ctx, scanner, sql, args},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Transaction.ScanOne return parameters for the expectation previously defined by the When method
func (e *TransactionMockScanOneExpectation) Then(err error) *TransactionMock {
	e.results = &TransactionMockScanOneResults{err}
	return e.mock
}

// ScanOne implements Transaction
func (m *TransactionMock) ScanOne(ctx context.Context, scanner RowScanner, sql string, args ...interface{}) (err error) {
	mm_atomic.AddUint64(&m.beforeScanOneCounter, 1)
	defer mm_atomic.AddUint64(&m.afterScanOneCounter, 1)

	for _, e := range m.ScanOneMock.expectations {
		if minimock.Equal(*e.params, TransactionMockScanOneParams{ctx, scanner, sql, args}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if m.ScanOneMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.ScanOneMock.defaultExpectation.Counter, 1)
		want := m.ScanOneMock.defaultExpectation.params
		got := TransactionMockScanOneParams{ctx, scanner, sql, args}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("TransactionMock.ScanOne got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.ScanOneMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the TransactionMock.ScanOne")
		}
		return (*results).err
	}
	if m.funcScanOne != nil {
		return m.funcScanOne(ctx, scanner, sql, args...)
	}
	m.t.Fatalf("Unexpected call to TransactionMock.ScanOne. %v %v %v %v", ctx, scanner, sql, args)
	return
}

// ScanOneAfterCounter returns a count of finished TransactionMock.ScanOne invocations
func (m *TransactionMock) ScanOneAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterScanOneCounter)
}

// ScanOneBeforeCounter returns a count of TransactionMock.ScanOne invocations
func (m *TransactionMock) ScanOneBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeScanOneCounter)
}

// MinimockScanOneDone returns true if the count of the ScanOne invocations corresponds
// the number of defined expectations
func (m *TransactionMock) MinimockScanOneDone() bool {
	for _, e := range m.ScanOneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ScanOneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterScanOneCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcScanOne != nil && mm_atomic.LoadUint64(&m.afterScanOneCounter) < 1 {
		return false
	}
	return true
}

// MinimockScanOneInspect logs each unmet expectation
func (m *TransactionMock) MinimockScanOneInspect() {
	for _, e := range m.ScanOneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TransactionMock.ScanOne with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ScanOneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterScanOneCounter) < 1 {
		if m.ScanOneMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TransactionMock.ScanOne")
		} else {
			m.t.Errorf("Expected call to TransactionMock.ScanOne with params: %#v", *m.ScanOneMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcScanOne != nil && mm_atomic.LoadUint64(&m.afterScanOneCounter) < 1 {
		m.t.Error("Expected call to TransactionMock.ScanOne")
	}
}

type mTransactionMockUpdate struct {
	mock               *TransactionMock
	defaultExpectation *TransactionMockUpdateExpectation
	expectations       []*TransactionMockUpdateExpectation
}

// TransactionMockUpdateExpectation specifies expectation struct of the Transaction.Update
type TransactionMockUpdateExpectation struct {
	mock    *TransactionMock
	params  *TransactionMockUpdateParams
	results *TransactionMockUpdateResults
	Counter uint64
}

// TransactionMockUpdateParams contains parameters of the Transaction.Update
type TransactionMockUpdateParams struct {
	ctx  context.Context
	sql  string
	args []interface{}
}

// TransactionMockUpdateResults contains results of the Transaction.Update
type TransactionMockUpdateResults struct {
	r1  sql.Result
	err error
}

// Expect sets up expected params for Transaction.Update
func (m *mTransactionMockUpdate) Expect(ctx context.Context, sql string, args ...interface{}) *mTransactionMockUpdate {
	if m.mock.funcUpdate != nil {
		m.mock.t.Fatalf("TransactionMock.Update mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &TransactionMockUpdateExpectation{}
	}

	m.defaultExpectation.params = &TransactionMockUpdateParams{ctx, sql, args}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Transaction.Update
func (m *mTransactionMockUpdate) Return(r1 sql.Result, err error) *TransactionMock {
	if m.mock.funcUpdate != nil {
		m.mock.t.Fatalf("TransactionMock.Update mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &TransactionMockUpdateExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &TransactionMockUpdateResults{r1, err}
	return m.mock
}

//Set uses given function f to mock the Transaction.Update method
func (m *mTransactionMockUpdate) Set(f func(ctx context.Context, sql string, args ...interface{}) (r1 sql.Result, err error)) *TransactionMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Transaction.Update method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Transaction.Update method")
	}

	m.mock.funcUpdate = f
	return m.mock
}

// When sets expectation for the Transaction.Update which will trigger the result defined by the following
// Then helper
func (m *mTransactionMockUpdate) When(ctx context.Context, sql string, args ...interface{}) *TransactionMockUpdateExpectation {
	if m.mock.funcUpdate != nil {
		m.mock.t.Fatalf("TransactionMock.Update mock is already set by Set")
	}

	expectation := &TransactionMockUpdateExpectation{
		mock:   m.mock,
		params: &TransactionMockUpdateParams{ctx, sql, args},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Transaction.Update return parameters for the expectation previously defined by the When method
func (e *TransactionMockUpdateExpectation) Then(r1 sql.Result, err error) *TransactionMock {
	e.results = &TransactionMockUpdateResults{r1, err}
	return e.mock
}

// Update implements Transaction
func (m *TransactionMock) Update(ctx context.Context, sql string, args ...interface{}) (r1 sql.Result, err error) {
	mm_atomic.AddUint64(&m.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&m.afterUpdateCounter, 1)

	for _, e := range m.UpdateMock.expectations {
		if minimock.Equal(*e.params, TransactionMockUpdateParams{ctx, sql, args}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if m.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.UpdateMock.defaultExpectation.Counter, 1)
		want := m.UpdateMock.defaultExpectation.params
		got := TransactionMockUpdateParams{ctx, sql, args}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("TransactionMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.UpdateMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the TransactionMock.Update")
		}
		return (*results).r1, (*results).err
	}
	if m.funcUpdate != nil {
		return m.funcUpdate(ctx, sql, args...)
	}
	m.t.Fatalf("Unexpected call to TransactionMock.Update. %v %v %v", ctx, sql, args)
	return
}

// UpdateAfterCounter returns a count of finished TransactionMock.Update invocations
func (m *TransactionMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of TransactionMock.Update invocations
func (m *TransactionMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeUpdateCounter)
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *TransactionMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *TransactionMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TransactionMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TransactionMock.Update")
		} else {
			m.t.Errorf("Expected call to TransactionMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to TransactionMock.Update")
	}
}

type mTransactionMockUpdateAndGetLastInsertID struct {
	mock               *TransactionMock
	defaultExpectation *TransactionMockUpdateAndGetLastInsertIDExpectation
	expectations       []*TransactionMockUpdateAndGetLastInsertIDExpectation
}

// TransactionMockUpdateAndGetLastInsertIDExpectation specifies expectation struct of the Transaction.UpdateAndGetLastInsertID
type TransactionMockUpdateAndGetLastInsertIDExpectation struct {
	mock    *TransactionMock
	params  *TransactionMockUpdateAndGetLastInsertIDParams
	results *TransactionMockUpdateAndGetLastInsertIDResults
	Counter uint64
}

// TransactionMockUpdateAndGetLastInsertIDParams contains parameters of the Transaction.UpdateAndGetLastInsertID
type TransactionMockUpdateAndGetLastInsertIDParams struct {
	ctx  context.Context
	sql  string
	args []interface{}
}

// TransactionMockUpdateAndGetLastInsertIDResults contains results of the Transaction.UpdateAndGetLastInsertID
type TransactionMockUpdateAndGetLastInsertIDResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for Transaction.UpdateAndGetLastInsertID
func (m *mTransactionMockUpdateAndGetLastInsertID) Expect(ctx context.Context, sql string, args ...interface{}) *mTransactionMockUpdateAndGetLastInsertID {
	if m.mock.funcUpdateAndGetLastInsertID != nil {
		m.mock.t.Fatalf("TransactionMock.UpdateAndGetLastInsertID mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &TransactionMockUpdateAndGetLastInsertIDExpectation{}
	}

	m.defaultExpectation.params = &TransactionMockUpdateAndGetLastInsertIDParams{ctx, sql, args}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Transaction.UpdateAndGetLastInsertID
func (m *mTransactionMockUpdateAndGetLastInsertID) Return(i1 int64, err error) *TransactionMock {
	if m.mock.funcUpdateAndGetLastInsertID != nil {
		m.mock.t.Fatalf("TransactionMock.UpdateAndGetLastInsertID mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &TransactionMockUpdateAndGetLastInsertIDExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &TransactionMockUpdateAndGetLastInsertIDResults{i1, err}
	return m.mock
}

//Set uses given function f to mock the Transaction.UpdateAndGetLastInsertID method
func (m *mTransactionMockUpdateAndGetLastInsertID) Set(f func(ctx context.Context, sql string, args ...interface{}) (i1 int64, err error)) *TransactionMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Transaction.UpdateAndGetLastInsertID method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Transaction.UpdateAndGetLastInsertID method")
	}

	m.mock.funcUpdateAndGetLastInsertID = f
	return m.mock
}

// When sets expectation for the Transaction.UpdateAndGetLastInsertID which will trigger the result defined by the following
// Then helper
func (m *mTransactionMockUpdateAndGetLastInsertID) When(ctx context.Context, sql string, args ...interface{}) *TransactionMockUpdateAndGetLastInsertIDExpectation {
	if m.mock.funcUpdateAndGetLastInsertID != nil {
		m.mock.t.Fatalf("TransactionMock.UpdateAndGetLastInsertID mock is already set by Set")
	}

	expectation := &TransactionMockUpdateAndGetLastInsertIDExpectation{
		mock:   m.mock,
		params: &TransactionMockUpdateAndGetLastInsertIDParams{ctx, sql, args},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Transaction.UpdateAndGetLastInsertID return parameters for the expectation previously defined by the When method
func (e *TransactionMockUpdateAndGetLastInsertIDExpectation) Then(i1 int64, err error) *TransactionMock {
	e.results = &TransactionMockUpdateAndGetLastInsertIDResults{i1, err}
	return e.mock
}

// UpdateAndGetLastInsertID implements Transaction
func (m *TransactionMock) UpdateAndGetLastInsertID(ctx context.Context, sql string, args ...interface{}) (i1 int64, err error) {
	mm_atomic.AddUint64(&m.beforeUpdateAndGetLastInsertIDCounter, 1)
	defer mm_atomic.AddUint64(&m.afterUpdateAndGetLastInsertIDCounter, 1)

	for _, e := range m.UpdateAndGetLastInsertIDMock.expectations {
		if minimock.Equal(*e.params, TransactionMockUpdateAndGetLastInsertIDParams{ctx, sql, args}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if m.UpdateAndGetLastInsertIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.UpdateAndGetLastInsertIDMock.defaultExpectation.Counter, 1)
		want := m.UpdateAndGetLastInsertIDMock.defaultExpectation.params
		got := TransactionMockUpdateAndGetLastInsertIDParams{ctx, sql, args}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("TransactionMock.UpdateAndGetLastInsertID got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.UpdateAndGetLastInsertIDMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the TransactionMock.UpdateAndGetLastInsertID")
		}
		return (*results).i1, (*results).err
	}
	if m.funcUpdateAndGetLastInsertID != nil {
		return m.funcUpdateAndGetLastInsertID(ctx, sql, args...)
	}
	m.t.Fatalf("Unexpected call to TransactionMock.UpdateAndGetLastInsertID. %v %v %v", ctx, sql, args)
	return
}

// UpdateAndGetLastInsertIDAfterCounter returns a count of finished TransactionMock.UpdateAndGetLastInsertID invocations
func (m *TransactionMock) UpdateAndGetLastInsertIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterUpdateAndGetLastInsertIDCounter)
}

// UpdateAndGetLastInsertIDBeforeCounter returns a count of TransactionMock.UpdateAndGetLastInsertID invocations
func (m *TransactionMock) UpdateAndGetLastInsertIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeUpdateAndGetLastInsertIDCounter)
}

// MinimockUpdateAndGetLastInsertIDDone returns true if the count of the UpdateAndGetLastInsertID invocations corresponds
// the number of defined expectations
func (m *TransactionMock) MinimockUpdateAndGetLastInsertIDDone() bool {
	for _, e := range m.UpdateAndGetLastInsertIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateAndGetLastInsertIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetLastInsertIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateAndGetLastInsertID != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetLastInsertIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateAndGetLastInsertIDInspect logs each unmet expectation
func (m *TransactionMock) MinimockUpdateAndGetLastInsertIDInspect() {
	for _, e := range m.UpdateAndGetLastInsertIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TransactionMock.UpdateAndGetLastInsertID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateAndGetLastInsertIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetLastInsertIDCounter) < 1 {
		if m.UpdateAndGetLastInsertIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TransactionMock.UpdateAndGetLastInsertID")
		} else {
			m.t.Errorf("Expected call to TransactionMock.UpdateAndGetLastInsertID with params: %#v", *m.UpdateAndGetLastInsertIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateAndGetLastInsertID != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetLastInsertIDCounter) < 1 {
		m.t.Error("Expected call to TransactionMock.UpdateAndGetLastInsertID")
	}
}

type mTransactionMockUpdateAndGetRowsAffected struct {
	mock               *TransactionMock
	defaultExpectation *TransactionMockUpdateAndGetRowsAffectedExpectation
	expectations       []*TransactionMockUpdateAndGetRowsAffectedExpectation
}

// TransactionMockUpdateAndGetRowsAffectedExpectation specifies expectation struct of the Transaction.UpdateAndGetRowsAffected
type TransactionMockUpdateAndGetRowsAffectedExpectation struct {
	mock    *TransactionMock
	params  *TransactionMockUpdateAndGetRowsAffectedParams
	results *TransactionMockUpdateAndGetRowsAffectedResults
	Counter uint64
}

// TransactionMockUpdateAndGetRowsAffectedParams contains parameters of the Transaction.UpdateAndGetRowsAffected
type TransactionMockUpdateAndGetRowsAffectedParams struct {
	ctx  context.Context
	sql  string
	args []interface{}
}

// TransactionMockUpdateAndGetRowsAffectedResults contains results of the Transaction.UpdateAndGetRowsAffected
type TransactionMockUpdateAndGetRowsAffectedResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for Transaction.UpdateAndGetRowsAffected
func (m *mTransactionMockUpdateAndGetRowsAffected) Expect(ctx context.Context, sql string, args ...interface{}) *mTransactionMockUpdateAndGetRowsAffected {
	if m.mock.funcUpdateAndGetRowsAffected != nil {
		m.mock.t.Fatalf("TransactionMock.UpdateAndGetRowsAffected mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &TransactionMockUpdateAndGetRowsAffectedExpectation{}
	}

	m.defaultExpectation.params = &TransactionMockUpdateAndGetRowsAffectedParams{ctx, sql, args}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Transaction.UpdateAndGetRowsAffected
func (m *mTransactionMockUpdateAndGetRowsAffected) Return(i1 int64, err error) *TransactionMock {
	if m.mock.funcUpdateAndGetRowsAffected != nil {
		m.mock.t.Fatalf("TransactionMock.UpdateAndGetRowsAffected mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &TransactionMockUpdateAndGetRowsAffectedExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &TransactionMockUpdateAndGetRowsAffectedResults{i1, err}
	return m.mock
}

//Set uses given function f to mock the Transaction.UpdateAndGetRowsAffected method
func (m *mTransactionMockUpdateAndGetRowsAffected) Set(f func(ctx context.Context, sql string, args ...interface{}) (i1 int64, err error)) *TransactionMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Transaction.UpdateAndGetRowsAffected method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Transaction.UpdateAndGetRowsAffected method")
	}

	m.mock.funcUpdateAndGetRowsAffected = f
	return m.mock
}

// When sets expectation for the Transaction.UpdateAndGetRowsAffected which will trigger the result defined by the following
// Then helper
func (m *mTransactionMockUpdateAndGetRowsAffected) When(ctx context.Context, sql string, args ...interface{}) *TransactionMockUpdateAndGetRowsAffectedExpectation {
	if m.mock.funcUpdateAndGetRowsAffected != nil {
		m.mock.t.Fatalf("TransactionMock.UpdateAndGetRowsAffected mock is already set by Set")
	}

	expectation := &TransactionMockUpdateAndGetRowsAffectedExpectation{
		mock:   m.mock,
		params: &TransactionMockUpdateAndGetRowsAffectedParams{ctx, sql, args},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Transaction.UpdateAndGetRowsAffected return parameters for the expectation previously defined by the When method
func (e *TransactionMockUpdateAndGetRowsAffectedExpectation) Then(i1 int64, err error) *TransactionMock {
	e.results = &TransactionMockUpdateAndGetRowsAffectedResults{i1, err}
	return e.mock
}

// UpdateAndGetRowsAffected implements Transaction
func (m *TransactionMock) UpdateAndGetRowsAffected(ctx context.Context, sql string, args ...interface{}) (i1 int64, err error) {
	mm_atomic.AddUint64(&m.beforeUpdateAndGetRowsAffectedCounter, 1)
	defer mm_atomic.AddUint64(&m.afterUpdateAndGetRowsAffectedCounter, 1)

	for _, e := range m.UpdateAndGetRowsAffectedMock.expectations {
		if minimock.Equal(*e.params, TransactionMockUpdateAndGetRowsAffectedParams{ctx, sql, args}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if m.UpdateAndGetRowsAffectedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.UpdateAndGetRowsAffectedMock.defaultExpectation.Counter, 1)
		want := m.UpdateAndGetRowsAffectedMock.defaultExpectation.params
		got := TransactionMockUpdateAndGetRowsAffectedParams{ctx, sql, args}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("TransactionMock.UpdateAndGetRowsAffected got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.UpdateAndGetRowsAffectedMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the TransactionMock.UpdateAndGetRowsAffected")
		}
		return (*results).i1, (*results).err
	}
	if m.funcUpdateAndGetRowsAffected != nil {
		return m.funcUpdateAndGetRowsAffected(ctx, sql, args...)
	}
	m.t.Fatalf("Unexpected call to TransactionMock.UpdateAndGetRowsAffected. %v %v %v", ctx, sql, args)
	return
}

// UpdateAndGetRowsAffectedAfterCounter returns a count of finished TransactionMock.UpdateAndGetRowsAffected invocations
func (m *TransactionMock) UpdateAndGetRowsAffectedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterUpdateAndGetRowsAffectedCounter)
}

// UpdateAndGetRowsAffectedBeforeCounter returns a count of TransactionMock.UpdateAndGetRowsAffected invocations
func (m *TransactionMock) UpdateAndGetRowsAffectedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeUpdateAndGetRowsAffectedCounter)
}

// MinimockUpdateAndGetRowsAffectedDone returns true if the count of the UpdateAndGetRowsAffected invocations corresponds
// the number of defined expectations
func (m *TransactionMock) MinimockUpdateAndGetRowsAffectedDone() bool {
	for _, e := range m.UpdateAndGetRowsAffectedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateAndGetRowsAffectedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetRowsAffectedCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateAndGetRowsAffected != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetRowsAffectedCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateAndGetRowsAffectedInspect logs each unmet expectation
func (m *TransactionMock) MinimockUpdateAndGetRowsAffectedInspect() {
	for _, e := range m.UpdateAndGetRowsAffectedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TransactionMock.UpdateAndGetRowsAffected with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateAndGetRowsAffectedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetRowsAffectedCounter) < 1 {
		if m.UpdateAndGetRowsAffectedMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TransactionMock.UpdateAndGetRowsAffected")
		} else {
			m.t.Errorf("Expected call to TransactionMock.UpdateAndGetRowsAffected with params: %#v", *m.UpdateAndGetRowsAffectedMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateAndGetRowsAffected != nil && mm_atomic.LoadUint64(&m.afterUpdateAndGetRowsAffectedCounter) < 1 {
		m.t.Error("Expected call to TransactionMock.UpdateAndGetRowsAffected")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TransactionMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockPreparedInspect()

		m.MinimockScanInspect()

		m.MinimockScanOneInspect()

		m.MinimockUpdateInspect()

		m.MinimockUpdateAndGetLastInsertIDInspect()

		m.MinimockUpdateAndGetRowsAffectedInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TransactionMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TransactionMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockPreparedDone() &&
		m.MinimockScanDone() &&
		m.MinimockScanOneDone() &&
		m.MinimockUpdateDone() &&
		m.MinimockUpdateAndGetLastInsertIDDone() &&
		m.MinimockUpdateAndGetRowsAffectedDone()
}
